//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Money
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using Money.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new UserProfile User
        {
            get
            {
                return ((UserProfile)(base.User));
            }
        }
    }
}
namespace Money.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("Money-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserProfile"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<UserProfile> UserProfiles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserProfile>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserProfile"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserProfile"/> entity instances.</returns>
        public EntityQuery<UserProfile> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<UserProfile>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserProfile"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserProfile"/> entity instances.</returns>
        public EntityQuery<UserProfile> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<UserProfile>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserProfile"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserProfile"/> entity instances.</returns>
        public EntityQuery<UserProfile> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<UserProfile>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<UserProfile> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<UserProfile> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<UserProfile> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<UserProfile>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MembershipService' DomainService.
    /// </summary>
    public sealed partial class MembershipContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipContext"/> class.
        /// </summary>
        public MembershipContext() : 
                this(new WebDomainClient<IMembershipServiceContract>(new Uri("Money-Web-MembershipService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MembershipService service URI.</param>
        public MembershipContext(Uri serviceUri) : 
                this(new WebDomainClient<IMembershipServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MembershipContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ChangePassword' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="currentPassword">The value for the 'currentPassword' parameter of this action.</param>
        /// <param name="newPassword">The value for the 'newPassword' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ChangePassword(string userName, string currentPassword, string newPassword, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("currentPassword", currentPassword);
            parameters.Add("newPassword", newPassword);
            this.ValidateMethod("ChangePassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ChangePassword", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ChangePassword' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="currentPassword">The value for the 'currentPassword' parameter of this action.</param>
        /// <param name="newPassword">The value for the 'newPassword' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ChangePassword(string userName, string currentPassword, string newPassword)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("currentPassword", currentPassword);
            parameters.Add("newPassword", newPassword);
            this.ValidateMethod("ChangePassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ChangePassword", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ChangePasswordQuestionAndAnswer' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="newPasswordQuestion">The value for the 'newPasswordQuestion' parameter of this action.</param>
        /// <param name="newPasswordAnswer">The value for the 'newPasswordAnswer' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ChangePasswordQuestionAndAnswer(string userName, string password, string newPasswordQuestion, string newPasswordAnswer, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("newPasswordQuestion", newPasswordQuestion);
            parameters.Add("newPasswordAnswer", newPasswordAnswer);
            this.ValidateMethod("ChangePasswordQuestionAndAnswer", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ChangePasswordQuestionAndAnswer", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ChangePasswordQuestionAndAnswer' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="newPasswordQuestion">The value for the 'newPasswordQuestion' parameter of this action.</param>
        /// <param name="newPasswordAnswer">The value for the 'newPasswordAnswer' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ChangePasswordQuestionAndAnswer(string userName, string password, string newPasswordQuestion, string newPasswordAnswer)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("newPasswordQuestion", newPasswordQuestion);
            parameters.Add("newPasswordAnswer", newPasswordAnswer);
            this.ValidateMethod("ChangePasswordQuestionAndAnswer", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ChangePasswordQuestionAndAnswer", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="roleName">The value for the 'roleName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation CreateUser(string userName, string password, string emailAddress, string roleName, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("roleName", roleName);
            this.ValidateMethod("CreateUser", parameters);
            return this.InvokeOperation("CreateUser", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="roleName">The value for the 'roleName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation CreateUser(string userName, string password, string emailAddress, string roleName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("roleName", roleName);
            this.ValidateMethod("CreateUser", parameters);
            return this.InvokeOperation("CreateUser", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="deleteAllRelatedData">The value for the 'deleteAllRelatedData' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteUser(string userName, bool deleteAllRelatedData, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("deleteAllRelatedData", deleteAllRelatedData);
            this.ValidateMethod("DeleteUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteUser", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'DeleteUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="deleteAllRelatedData">The value for the 'deleteAllRelatedData' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> DeleteUser(string userName, bool deleteAllRelatedData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("deleteAllRelatedData", deleteAllRelatedData);
            this.ValidateMethod("DeleteUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("DeleteUser", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailBodyEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailBodyEmail(string emailAddress, string fromDisplayName, string from, string subject, string body, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("EmailBodyEmail", parameters);
            return this.InvokeOperation("EmailBodyEmail", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailBodyEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailBodyEmail(string emailAddress, string fromDisplayName, string from, string subject, string body)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("EmailBodyEmail", parameters);
            return this.InvokeOperation("EmailBodyEmail", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailBodyUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailBodyUser(string userName, string fromDisplayName, string from, string subject, string body, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("EmailBodyUser", parameters);
            return this.InvokeOperation("EmailBodyUser", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailBodyUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailBodyUser(string userName, string fromDisplayName, string from, string subject, string body)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("EmailBodyUser", parameters);
            return this.InvokeOperation("EmailBodyUser", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailBodyUserEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailBodyUserEmail(string emailAddress, string fromDisplayName, string from, string subject, string body, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("EmailBodyUserEmail", parameters);
            return this.InvokeOperation("EmailBodyUserEmail", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailBodyUserEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="body">The value for the 'body' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailBodyUserEmail(string emailAddress, string fromDisplayName, string from, string subject, string body)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("body", body);
            this.ValidateMethod("EmailBodyUserEmail", parameters);
            return this.InvokeOperation("EmailBodyUserEmail", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailTemplateEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="bodyFileName">The value for the 'bodyFileName' parameter of this action.</param>
        /// <param name="replacements">The value for the 'replacements' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailTemplateEmail(string emailAddress, string fromDisplayName, string from, string subject, string bodyFileName, string replacements, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("bodyFileName", bodyFileName);
            parameters.Add("replacements", replacements);
            this.ValidateMethod("EmailTemplateEmail", parameters);
            return this.InvokeOperation("EmailTemplateEmail", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailTemplateEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="bodyFileName">The value for the 'bodyFileName' parameter of this action.</param>
        /// <param name="replacements">The value for the 'replacements' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailTemplateEmail(string emailAddress, string fromDisplayName, string from, string subject, string bodyFileName, string replacements)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("bodyFileName", bodyFileName);
            parameters.Add("replacements", replacements);
            this.ValidateMethod("EmailTemplateEmail", parameters);
            return this.InvokeOperation("EmailTemplateEmail", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailTemplateUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="bodyFileName">The value for the 'bodyFileName' parameter of this action.</param>
        /// <param name="replacements">The value for the 'replacements' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailTemplateUser(string userName, string fromDisplayName, string from, string subject, string bodyFileName, string replacements, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("bodyFileName", bodyFileName);
            parameters.Add("replacements", replacements);
            this.ValidateMethod("EmailTemplateUser", parameters);
            return this.InvokeOperation("EmailTemplateUser", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailTemplateUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="bodyFileName">The value for the 'bodyFileName' parameter of this action.</param>
        /// <param name="replacements">The value for the 'replacements' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailTemplateUser(string userName, string fromDisplayName, string from, string subject, string bodyFileName, string replacements)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("bodyFileName", bodyFileName);
            parameters.Add("replacements", replacements);
            this.ValidateMethod("EmailTemplateUser", parameters);
            return this.InvokeOperation("EmailTemplateUser", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailTemplateUserEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="bodyFileName">The value for the 'bodyFileName' parameter of this action.</param>
        /// <param name="replacements">The value for the 'replacements' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailTemplateUserEmail(string emailAddress, string fromDisplayName, string from, string subject, string bodyFileName, string replacements, Action<InvokeOperation> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("bodyFileName", bodyFileName);
            parameters.Add("replacements", replacements);
            this.ValidateMethod("EmailTemplateUserEmail", parameters);
            return this.InvokeOperation("EmailTemplateUserEmail", typeof(void), parameters, true, callback, userState);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'EmailTemplateUserEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
        /// <param name="from">The value for the 'from' parameter of this action.</param>
        /// <param name="subject">The value for the 'subject' parameter of this action.</param>
        /// <param name="bodyFileName">The value for the 'bodyFileName' parameter of this action.</param>
        /// <param name="replacements">The value for the 'replacements' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation EmailTemplateUserEmail(string emailAddress, string fromDisplayName, string from, string subject, string bodyFileName, string replacements)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            parameters.Add("fromDisplayName", fromDisplayName);
            parameters.Add("from", from);
            parameters.Add("subject", subject);
            parameters.Add("bodyFileName", bodyFileName);
            parameters.Add("replacements", replacements);
            this.ValidateMethod("EmailTemplateUserEmail", parameters);
            return this.InvokeOperation("EmailTemplateUserEmail", typeof(void), parameters, true, null, null);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetNumberOfUsersOnline' method of the DomainService.
        /// </summary>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetNumberOfUsersOnline(Action<InvokeOperation<int>> callback, object userState)
        {
            this.ValidateMethod("GetNumberOfUsersOnline", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetNumberOfUsersOnline", typeof(int), null, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetNumberOfUsersOnline' method of the DomainService.
        /// </summary>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GetNumberOfUsersOnline()
        {
            this.ValidateMethod("GetNumberOfUsersOnline", null);
            return ((InvokeOperation<int>)(this.InvokeOperation("GetNumberOfUsersOnline", typeof(int), null, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUserNameByEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetUserNameByEmail(string emailAddress, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            this.ValidateMethod("GetUserNameByEmail", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetUserNameByEmail", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetUserNameByEmail' method of the DomainService.
        /// </summary>
        /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetUserNameByEmail(string emailAddress)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("emailAddress", emailAddress);
            this.ValidateMethod("GetUserNameByEmail", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetUserNameByEmail", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ResetAndChangePassword' method of the DomainService.
        /// </summary>
        /// <param name="passwordCode">The value for the 'passwordCode' parameter of this action.</param>
        /// <param name="newPassword">The value for the 'newPassword' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ResetAndChangePassword(string passwordCode, string newPassword, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("passwordCode", passwordCode);
            parameters.Add("newPassword", newPassword);
            this.ValidateMethod("ResetAndChangePassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ResetAndChangePassword", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ResetAndChangePassword' method of the DomainService.
        /// </summary>
        /// <param name="passwordCode">The value for the 'passwordCode' parameter of this action.</param>
        /// <param name="newPassword">The value for the 'newPassword' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ResetAndChangePassword(string passwordCode, string newPassword)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("passwordCode", passwordCode);
            parameters.Add("newPassword", newPassword);
            this.ValidateMethod("ResetAndChangePassword", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ResetAndChangePassword", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ResetPassword' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ResetPassword(string userName, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("ResetPassword", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("ResetPassword", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ResetPassword' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ResetPassword(string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("ResetPassword", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("ResetPassword", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UnlockUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UnlockUser(string userName, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("UnlockUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UnlockUser", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'UnlockUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> UnlockUser(string userName)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            this.ValidateMethod("UnlockUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("UnlockUser", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ValidateResetPasswordCode' method of the DomainService.
        /// </summary>
        /// <param name="passwordCode">The value for the 'passwordCode' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ValidateResetPasswordCode(string passwordCode, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("passwordCode", passwordCode);
            this.ValidateMethod("ValidateResetPasswordCode", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("ValidateResetPasswordCode", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ValidateResetPasswordCode' method of the DomainService.
        /// </summary>
        /// <param name="passwordCode">The value for the 'passwordCode' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> ValidateResetPasswordCode(string passwordCode)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("passwordCode", passwordCode);
            this.ValidateMethod("ValidateResetPasswordCode", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("ValidateResetPasswordCode", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ValidateUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ValidateUser(string userName, string password, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            this.ValidateMethod("ValidateUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ValidateUser", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'ValidateUser' method of the DomainService.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> ValidateUser(string userName, string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            this.ValidateMethod("ValidateUser", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("ValidateUser", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MembershipContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MembershipService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMembershipServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'ChangePassword' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="currentPassword">The value for the 'currentPassword' parameter of this action.</param>
            /// <param name="newPassword">The value for the 'newPassword' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/ChangePasswordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/ChangePassword", ReplyAction="http://tempuri.org/MembershipService/ChangePasswordResponse")]
            IAsyncResult BeginChangePassword(string userName, string currentPassword, string newPassword, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginChangePassword'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginChangePassword'.</param>
            /// <returns>The 'Boolean' returned from the 'ChangePassword' operation.</returns>
            bool EndChangePassword(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ChangePasswordQuestionAndAnswer' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="newPasswordQuestion">The value for the 'newPasswordQuestion' parameter of this action.</param>
            /// <param name="newPasswordAnswer">The value for the 'newPasswordAnswer' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/ChangePasswordQuestionAndAnswerDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/ChangePasswordQuestionAndAnswer", ReplyAction="http://tempuri.org/MembershipService/ChangePasswordQuestionAndAnswerResponse")]
            IAsyncResult BeginChangePasswordQuestionAndAnswer(string userName, string password, string newPasswordQuestion, string newPasswordAnswer, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginChangePasswordQuestionAndAnswer'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginChangePasswordQuestionAndAnswer'.</param>
            /// <returns>The 'Boolean' returned from the 'ChangePasswordQuestionAndAnswer' operation.</returns>
            bool EndChangePasswordQuestionAndAnswer(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
            /// <param name="roleName">The value for the 'roleName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/CreateUser", ReplyAction="http://tempuri.org/MembershipService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(string userName, string password, string emailAddress, string roleName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            void EndCreateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'DeleteUser' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="deleteAllRelatedData">The value for the 'deleteAllRelatedData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/DeleteUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/DeleteUser", ReplyAction="http://tempuri.org/MembershipService/DeleteUserResponse")]
            IAsyncResult BeginDeleteUser(string userName, bool deleteAllRelatedData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginDeleteUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginDeleteUser'.</param>
            /// <returns>The 'Boolean' returned from the 'DeleteUser' operation.</returns>
            bool EndDeleteUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'EmailBodyEmail' operation.
            /// </summary>
            /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
            /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="subject">The value for the 'subject' parameter of this action.</param>
            /// <param name="body">The value for the 'body' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/EmailBodyEmailDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/EmailBodyEmail", ReplyAction="http://tempuri.org/MembershipService/EmailBodyEmailResponse")]
            IAsyncResult BeginEmailBodyEmail(string emailAddress, string fromDisplayName, string from, string subject, string body, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEmailBodyEmail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEmailBodyEmail'.</param>
            void EndEmailBodyEmail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'EmailBodyUser' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="subject">The value for the 'subject' parameter of this action.</param>
            /// <param name="body">The value for the 'body' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/EmailBodyUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/EmailBodyUser", ReplyAction="http://tempuri.org/MembershipService/EmailBodyUserResponse")]
            IAsyncResult BeginEmailBodyUser(string userName, string fromDisplayName, string from, string subject, string body, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEmailBodyUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEmailBodyUser'.</param>
            void EndEmailBodyUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'EmailBodyUserEmail' operation.
            /// </summary>
            /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
            /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="subject">The value for the 'subject' parameter of this action.</param>
            /// <param name="body">The value for the 'body' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/EmailBodyUserEmailDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/EmailBodyUserEmail", ReplyAction="http://tempuri.org/MembershipService/EmailBodyUserEmailResponse")]
            IAsyncResult BeginEmailBodyUserEmail(string emailAddress, string fromDisplayName, string from, string subject, string body, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEmailBodyUserEmail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEmailBodyUserEmail'.</param>
            void EndEmailBodyUserEmail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'EmailTemplateEmail' operation.
            /// </summary>
            /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
            /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="subject">The value for the 'subject' parameter of this action.</param>
            /// <param name="bodyFileName">The value for the 'bodyFileName' parameter of this action.</param>
            /// <param name="replacements">The value for the 'replacements' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/EmailTemplateEmailDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/EmailTemplateEmail", ReplyAction="http://tempuri.org/MembershipService/EmailTemplateEmailResponse")]
            IAsyncResult BeginEmailTemplateEmail(string emailAddress, string fromDisplayName, string from, string subject, string bodyFileName, string replacements, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEmailTemplateEmail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEmailTemplateEmail'.</param>
            void EndEmailTemplateEmail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'EmailTemplateUser' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="subject">The value for the 'subject' parameter of this action.</param>
            /// <param name="bodyFileName">The value for the 'bodyFileName' parameter of this action.</param>
            /// <param name="replacements">The value for the 'replacements' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/EmailTemplateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/EmailTemplateUser", ReplyAction="http://tempuri.org/MembershipService/EmailTemplateUserResponse")]
            IAsyncResult BeginEmailTemplateUser(string userName, string fromDisplayName, string from, string subject, string bodyFileName, string replacements, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEmailTemplateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEmailTemplateUser'.</param>
            void EndEmailTemplateUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'EmailTemplateUserEmail' operation.
            /// </summary>
            /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
            /// <param name="fromDisplayName">The value for the 'fromDisplayName' parameter of this action.</param>
            /// <param name="from">The value for the 'from' parameter of this action.</param>
            /// <param name="subject">The value for the 'subject' parameter of this action.</param>
            /// <param name="bodyFileName">The value for the 'bodyFileName' parameter of this action.</param>
            /// <param name="replacements">The value for the 'replacements' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/EmailTemplateUserEmailDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/EmailTemplateUserEmail", ReplyAction="http://tempuri.org/MembershipService/EmailTemplateUserEmailResponse")]
            IAsyncResult BeginEmailTemplateUserEmail(string emailAddress, string fromDisplayName, string from, string subject, string bodyFileName, string replacements, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginEmailTemplateUserEmail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginEmailTemplateUserEmail'.</param>
            void EndEmailTemplateUserEmail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetNumberOfUsersOnline' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/GetNumberOfUsersOnlineDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/GetNumberOfUsersOnline", ReplyAction="http://tempuri.org/MembershipService/GetNumberOfUsersOnlineResponse")]
            IAsyncResult BeginGetNumberOfUsersOnline(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetNumberOfUsersOnline'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetNumberOfUsersOnline'.</param>
            /// <returns>The 'Int32' returned from the 'GetNumberOfUsersOnline' operation.</returns>
            int EndGetNumberOfUsersOnline(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserNameByEmail' operation.
            /// </summary>
            /// <param name="emailAddress">The value for the 'emailAddress' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/GetUserNameByEmailDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/GetUserNameByEmail", ReplyAction="http://tempuri.org/MembershipService/GetUserNameByEmailResponse")]
            IAsyncResult BeginGetUserNameByEmail(string emailAddress, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserNameByEmail'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserNameByEmail'.</param>
            /// <returns>The 'String' returned from the 'GetUserNameByEmail' operation.</returns>
            string EndGetUserNameByEmail(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ResetAndChangePassword' operation.
            /// </summary>
            /// <param name="passwordCode">The value for the 'passwordCode' parameter of this action.</param>
            /// <param name="newPassword">The value for the 'newPassword' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/ResetAndChangePasswordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/ResetAndChangePassword", ReplyAction="http://tempuri.org/MembershipService/ResetAndChangePasswordResponse")]
            IAsyncResult BeginResetAndChangePassword(string passwordCode, string newPassword, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginResetAndChangePassword'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginResetAndChangePassword'.</param>
            /// <returns>The 'Boolean' returned from the 'ResetAndChangePassword' operation.</returns>
            bool EndResetAndChangePassword(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ResetPassword' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/ResetPasswordDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/ResetPassword", ReplyAction="http://tempuri.org/MembershipService/ResetPasswordResponse")]
            IAsyncResult BeginResetPassword(string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginResetPassword'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginResetPassword'.</param>
            /// <returns>The 'String' returned from the 'ResetPassword' operation.</returns>
            string EndResetPassword(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'UnlockUser' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/UnlockUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/UnlockUser", ReplyAction="http://tempuri.org/MembershipService/UnlockUserResponse")]
            IAsyncResult BeginUnlockUser(string userName, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginUnlockUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginUnlockUser'.</param>
            /// <returns>The 'Boolean' returned from the 'UnlockUser' operation.</returns>
            bool EndUnlockUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ValidateResetPasswordCode' operation.
            /// </summary>
            /// <param name="passwordCode">The value for the 'passwordCode' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/ValidateResetPasswordCodeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/ValidateResetPasswordCode", ReplyAction="http://tempuri.org/MembershipService/ValidateResetPasswordCodeResponse")]
            IAsyncResult BeginValidateResetPasswordCode(string passwordCode, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginValidateResetPasswordCode'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginValidateResetPasswordCode'.</param>
            /// <returns>The 'String' returned from the 'ValidateResetPasswordCode' operation.</returns>
            string EndValidateResetPasswordCode(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'ValidateUser' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MembershipService/ValidateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MembershipService/ValidateUser", ReplyAction="http://tempuri.org/MembershipService/ValidateUserResponse")]
            IAsyncResult BeginValidateUser(string userName, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginValidateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginValidateUser'.</param>
            /// <returns>The 'Boolean' returned from the 'ValidateUser' operation.</returns>
            bool EndValidateUser(IAsyncResult result);
        }
        
        internal sealed class MembershipContextEntityContainer : EntityContainer
        {
            
            public MembershipContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'UserProfile' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Money.Web")]
    public sealed partial class UserProfile : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _documentXml;
        
        private bool _includeDependants;
        
        private bool _includeSpouse;
        
        private int _language;
        
        private int _meBirthDate;
        
        private string _meFirstName;
        
        private string _meGender;
        
        private double _meLifeExpectancy;
        
        private string _memberComment;
        
        private string _memberEmail;
        
        private bool _memberIsAdmin;
        
        private bool _memberIsPremium;
        
        private Guid _memberUserId;
        
        private string _meRelationshipStatus;
        
        private string _name = string.Empty;
        
        private bool _optInUpdates;
        
        private string _profileXml;
        
        private IEnumerable<string> _roles;
        
        private int _spouseBirthDate;
        
        private string _spouseFirstName;
        
        private string _spouseGender;
        
        private double _spouseLifeExpectancy;
        
        private string _spouseRelationshipStatus;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDocumentXmlChanging(string value);
        partial void OnDocumentXmlChanged();
        partial void OnIncludeDependantsChanging(bool value);
        partial void OnIncludeDependantsChanged();
        partial void OnIncludeSpouseChanging(bool value);
        partial void OnIncludeSpouseChanged();
        partial void OnLanguageChanging(int value);
        partial void OnLanguageChanged();
        partial void OnMeBirthDateChanging(int value);
        partial void OnMeBirthDateChanged();
        partial void OnMeFirstNameChanging(string value);
        partial void OnMeFirstNameChanged();
        partial void OnMeGenderChanging(string value);
        partial void OnMeGenderChanged();
        partial void OnMeLifeExpectancyChanging(double value);
        partial void OnMeLifeExpectancyChanged();
        partial void OnMemberCommentChanging(string value);
        partial void OnMemberCommentChanged();
        partial void OnMemberEmailChanging(string value);
        partial void OnMemberEmailChanged();
        partial void OnMemberIsAdminChanging(bool value);
        partial void OnMemberIsAdminChanged();
        partial void OnMemberIsPremiumChanging(bool value);
        partial void OnMemberIsPremiumChanged();
        partial void OnMemberUserIdChanging(Guid value);
        partial void OnMemberUserIdChanged();
        partial void OnMeRelationshipStatusChanging(string value);
        partial void OnMeRelationshipStatusChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOptInUpdatesChanging(bool value);
        partial void OnOptInUpdatesChanged();
        partial void OnProfileXmlChanging(string value);
        partial void OnProfileXmlChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();
        partial void OnSpouseBirthDateChanging(int value);
        partial void OnSpouseBirthDateChanged();
        partial void OnSpouseFirstNameChanging(string value);
        partial void OnSpouseFirstNameChanged();
        partial void OnSpouseGenderChanging(string value);
        partial void OnSpouseGenderChanged();
        partial void OnSpouseLifeExpectancyChanging(double value);
        partial void OnSpouseLifeExpectancyChanged();
        partial void OnSpouseRelationshipStatusChanging(string value);
        partial void OnSpouseRelationshipStatusChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfile"/> class.
        /// </summary>
        public UserProfile()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'DocumentXml' value.
        /// </summary>
        [DataMember()]
        public string DocumentXml
        {
            get
            {
                return this._documentXml;
            }
            set
            {
                if ((this._documentXml != value))
                {
                    this.OnDocumentXmlChanging(value);
                    this.RaiseDataMemberChanging("DocumentXml");
                    this.ValidateProperty("DocumentXml", value);
                    this._documentXml = value;
                    this.RaiseDataMemberChanged("DocumentXml");
                    this.OnDocumentXmlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IncludeDependants' value.
        /// </summary>
        [DataMember()]
        public bool IncludeDependants
        {
            get
            {
                return this._includeDependants;
            }
            set
            {
                if ((this._includeDependants != value))
                {
                    this.OnIncludeDependantsChanging(value);
                    this.RaiseDataMemberChanging("IncludeDependants");
                    this.ValidateProperty("IncludeDependants", value);
                    this._includeDependants = value;
                    this.RaiseDataMemberChanged("IncludeDependants");
                    this.OnIncludeDependantsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IncludeSpouse' value.
        /// </summary>
        [DataMember()]
        public bool IncludeSpouse
        {
            get
            {
                return this._includeSpouse;
            }
            set
            {
                if ((this._includeSpouse != value))
                {
                    this.OnIncludeSpouseChanging(value);
                    this.RaiseDataMemberChanging("IncludeSpouse");
                    this.ValidateProperty("IncludeSpouse", value);
                    this._includeSpouse = value;
                    this.RaiseDataMemberChanged("IncludeSpouse");
                    this.OnIncludeSpouseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Language' value.
        /// </summary>
        [DataMember()]
        public int Language
        {
            get
            {
                return this._language;
            }
            set
            {
                if ((this._language != value))
                {
                    this.OnLanguageChanging(value);
                    this.RaiseDataMemberChanging("Language");
                    this.ValidateProperty("Language", value);
                    this._language = value;
                    this.RaiseDataMemberChanged("Language");
                    this.OnLanguageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MeBirthDate' value.
        /// </summary>
        [DataMember()]
        public int MeBirthDate
        {
            get
            {
                return this._meBirthDate;
            }
            set
            {
                if ((this._meBirthDate != value))
                {
                    this.OnMeBirthDateChanging(value);
                    this.RaiseDataMemberChanging("MeBirthDate");
                    this.ValidateProperty("MeBirthDate", value);
                    this._meBirthDate = value;
                    this.RaiseDataMemberChanged("MeBirthDate");
                    this.OnMeBirthDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MeFirstName' value.
        /// </summary>
        [DataMember()]
        public string MeFirstName
        {
            get
            {
                return this._meFirstName;
            }
            set
            {
                if ((this._meFirstName != value))
                {
                    this.OnMeFirstNameChanging(value);
                    this.RaiseDataMemberChanging("MeFirstName");
                    this.ValidateProperty("MeFirstName", value);
                    this._meFirstName = value;
                    this.RaiseDataMemberChanged("MeFirstName");
                    this.OnMeFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MeGender' value.
        /// </summary>
        [DataMember()]
        public string MeGender
        {
            get
            {
                return this._meGender;
            }
            set
            {
                if ((this._meGender != value))
                {
                    this.OnMeGenderChanging(value);
                    this.RaiseDataMemberChanging("MeGender");
                    this.ValidateProperty("MeGender", value);
                    this._meGender = value;
                    this.RaiseDataMemberChanged("MeGender");
                    this.OnMeGenderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MeLifeExpectancy' value.
        /// </summary>
        [DataMember()]
        public double MeLifeExpectancy
        {
            get
            {
                return this._meLifeExpectancy;
            }
            set
            {
                if ((this._meLifeExpectancy != value))
                {
                    this.OnMeLifeExpectancyChanging(value);
                    this.RaiseDataMemberChanging("MeLifeExpectancy");
                    this.ValidateProperty("MeLifeExpectancy", value);
                    this._meLifeExpectancy = value;
                    this.RaiseDataMemberChanged("MeLifeExpectancy");
                    this.OnMeLifeExpectancyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemberComment' value.
        /// </summary>
        [DataMember()]
        public string MemberComment
        {
            get
            {
                return this._memberComment;
            }
            set
            {
                if ((this._memberComment != value))
                {
                    this.OnMemberCommentChanging(value);
                    this.RaiseDataMemberChanging("MemberComment");
                    this.ValidateProperty("MemberComment", value);
                    this._memberComment = value;
                    this.RaiseDataMemberChanged("MemberComment");
                    this.OnMemberCommentChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemberEmail' value.
        /// </summary>
        [DataMember()]
        public string MemberEmail
        {
            get
            {
                return this._memberEmail;
            }
            set
            {
                if ((this._memberEmail != value))
                {
                    this.OnMemberEmailChanging(value);
                    this.RaiseDataMemberChanging("MemberEmail");
                    this.ValidateProperty("MemberEmail", value);
                    this._memberEmail = value;
                    this.RaiseDataMemberChanged("MemberEmail");
                    this.OnMemberEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemberIsAdmin' value.
        /// </summary>
        [DataMember()]
        public bool MemberIsAdmin
        {
            get
            {
                return this._memberIsAdmin;
            }
            set
            {
                if ((this._memberIsAdmin != value))
                {
                    this.OnMemberIsAdminChanging(value);
                    this.RaiseDataMemberChanging("MemberIsAdmin");
                    this.ValidateProperty("MemberIsAdmin", value);
                    this._memberIsAdmin = value;
                    this.RaiseDataMemberChanged("MemberIsAdmin");
                    this.OnMemberIsAdminChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemberIsPremium' value.
        /// </summary>
        [DataMember()]
        public bool MemberIsPremium
        {
            get
            {
                return this._memberIsPremium;
            }
            set
            {
                if ((this._memberIsPremium != value))
                {
                    this.OnMemberIsPremiumChanging(value);
                    this.RaiseDataMemberChanging("MemberIsPremium");
                    this.ValidateProperty("MemberIsPremium", value);
                    this._memberIsPremium = value;
                    this.RaiseDataMemberChanged("MemberIsPremium");
                    this.OnMemberIsPremiumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MemberUserId' value.
        /// </summary>
        [DataMember()]
        public Guid MemberUserId
        {
            get
            {
                return this._memberUserId;
            }
            set
            {
                if ((this._memberUserId != value))
                {
                    this.OnMemberUserIdChanging(value);
                    this.RaiseDataMemberChanging("MemberUserId");
                    this.ValidateProperty("MemberUserId", value);
                    this._memberUserId = value;
                    this.RaiseDataMemberChanged("MemberUserId");
                    this.OnMemberUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MeRelationshipStatus' value.
        /// </summary>
        [DataMember()]
        public string MeRelationshipStatus
        {
            get
            {
                return this._meRelationshipStatus;
            }
            set
            {
                if ((this._meRelationshipStatus != value))
                {
                    this.OnMeRelationshipStatusChanging(value);
                    this.RaiseDataMemberChanging("MeRelationshipStatus");
                    this.ValidateProperty("MeRelationshipStatus", value);
                    this._meRelationshipStatus = value;
                    this.RaiseDataMemberChanged("MeRelationshipStatus");
                    this.OnMeRelationshipStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OptInUpdates' value.
        /// </summary>
        [DataMember()]
        public bool OptInUpdates
        {
            get
            {
                return this._optInUpdates;
            }
            set
            {
                if ((this._optInUpdates != value))
                {
                    this.OnOptInUpdatesChanging(value);
                    this.RaiseDataMemberChanging("OptInUpdates");
                    this.ValidateProperty("OptInUpdates", value);
                    this._optInUpdates = value;
                    this.RaiseDataMemberChanged("OptInUpdates");
                    this.OnOptInUpdatesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProfileXml' value.
        /// </summary>
        [DataMember()]
        public string ProfileXml
        {
            get
            {
                return this._profileXml;
            }
            set
            {
                if ((this._profileXml != value))
                {
                    this.OnProfileXmlChanging(value);
                    this.RaiseDataMemberChanging("ProfileXml");
                    this.ValidateProperty("ProfileXml", value);
                    this._profileXml = value;
                    this.RaiseDataMemberChanged("ProfileXml");
                    this.OnProfileXmlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SpouseBirthDate' value.
        /// </summary>
        [DataMember()]
        public int SpouseBirthDate
        {
            get
            {
                return this._spouseBirthDate;
            }
            set
            {
                if ((this._spouseBirthDate != value))
                {
                    this.OnSpouseBirthDateChanging(value);
                    this.RaiseDataMemberChanging("SpouseBirthDate");
                    this.ValidateProperty("SpouseBirthDate", value);
                    this._spouseBirthDate = value;
                    this.RaiseDataMemberChanged("SpouseBirthDate");
                    this.OnSpouseBirthDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SpouseFirstName' value.
        /// </summary>
        [DataMember()]
        public string SpouseFirstName
        {
            get
            {
                return this._spouseFirstName;
            }
            set
            {
                if ((this._spouseFirstName != value))
                {
                    this.OnSpouseFirstNameChanging(value);
                    this.RaiseDataMemberChanging("SpouseFirstName");
                    this.ValidateProperty("SpouseFirstName", value);
                    this._spouseFirstName = value;
                    this.RaiseDataMemberChanged("SpouseFirstName");
                    this.OnSpouseFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SpouseGender' value.
        /// </summary>
        [DataMember()]
        public string SpouseGender
        {
            get
            {
                return this._spouseGender;
            }
            set
            {
                if ((this._spouseGender != value))
                {
                    this.OnSpouseGenderChanging(value);
                    this.RaiseDataMemberChanging("SpouseGender");
                    this.ValidateProperty("SpouseGender", value);
                    this._spouseGender = value;
                    this.RaiseDataMemberChanged("SpouseGender");
                    this.OnSpouseGenderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SpouseLifeExpectancy' value.
        /// </summary>
        [DataMember()]
        public double SpouseLifeExpectancy
        {
            get
            {
                return this._spouseLifeExpectancy;
            }
            set
            {
                if ((this._spouseLifeExpectancy != value))
                {
                    this.OnSpouseLifeExpectancyChanging(value);
                    this.RaiseDataMemberChanging("SpouseLifeExpectancy");
                    this.ValidateProperty("SpouseLifeExpectancy", value);
                    this._spouseLifeExpectancy = value;
                    this.RaiseDataMemberChanged("SpouseLifeExpectancy");
                    this.OnSpouseLifeExpectancyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SpouseRelationshipStatus' value.
        /// </summary>
        [DataMember()]
        public string SpouseRelationshipStatus
        {
            get
            {
                return this._spouseRelationshipStatus;
            }
            set
            {
                if ((this._spouseRelationshipStatus != value))
                {
                    this.OnSpouseRelationshipStatusChanging(value);
                    this.RaiseDataMemberChanging("SpouseRelationshipStatus");
                    this.ValidateProperty("SpouseRelationshipStatus", value);
                    this._spouseRelationshipStatus = value;
                    this.RaiseDataMemberChanged("SpouseRelationshipStatus");
                    this.OnSpouseRelationshipStatusChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
}
