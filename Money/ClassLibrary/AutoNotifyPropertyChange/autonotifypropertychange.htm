<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"></head><body><pre>Title:       Automatic implementation of INotifyPropertyChanged on POCO objects
Author:      Felice Pollano
Email:       felice@felicepollano.com
Member ID:   2784008
Language:    C#
Platform:    Microsoft.NET
Technology:  WPF
Level:       Intermediate
Description: Implementing INotifyPropertyChanged automatically using a custom proxy generator
Section      Type the Code Project Section you Wish the Article to Appear
SubSection   Type the Code Project SubSection you Wish the Article to Appear
License:     CPOL (default - select your desired license from our list)</pre>


<h2>Introduction</h2>

<p>Using databinding in WPF oblige to use and implement the INotifyPropertyChanged interface. This task is usually boring, and even unsafe since properties has to be specified by name via simple strings.
The property by string issue can be solved using lambda expression, so we can find some helper method that allow us some sintax sugar like 
<pre lang="C#" />NotifyPropertyChanged((NotifyPropertyChanged(()=&gt;MyProperty);</pre>
    but we need to derive our ViewModel frome some special class, and in any case we 
    have to write some boring code every time we set a property. In order to avoid 
    writing such things we can use AOP to intercept property setters, but this 
    usually involve some 3rd party library to add to our package, and sometimes this 
    is an issue. In this article we will see a solution to this problem using AOP, 
    but so circumstantial that we will need just a few classes to embed in our 
    solution in order to solve the problem.&nbsp; 

</p>

<h2>Backgroundg</h2> 
using INotifyPropertyChanged the plain vanilla way:
<pre lang="C#">
public class Customer :INotifyPropertyChanged
{

    private string name;

    public string Name
    {
        get { return name; }
        set { name = value;if(value!=name) OnPropertyChanged("Name"); }
    }
    
    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        if (PropertyChanged != null)
            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
    }
}
</pre>
    <p>
        With the <b>AutoNotifyPropertyChange</b> helper class we can reduce the code above to 
   With the AutoNotifyPropertyChange helper class we can reduce the code above to 
        this:</p>
<pre lang="C#">
public class Customer 
{
    public virtual string Name
}
</pre>
   <p>
        Simpler, isn&#39;t ?</p>
   
        In order to have the job done withe the simple library we are talking about. The 
        following requirement are mandatory to accomplish the result:<ol>
<li>ViewModel class has to be public</li>
<li>property to notify changes on must be public and <b>virtual</b></li>
</ol>
    <p>
        Notification will occour only when property are changed through the public 
        interface, proxy does not know anything about internal backing fields.</p>
    <p>
        If a custom implementation of INotifyPropertyChanged is needed we can pass to 
        the proxy generator a class implementing INotifyPropertyChanged, but in this 
        case we have to ensure the existence of a public or protected function called 
        OnPropertyChanged(string propertyName) firing the event. The proxy generator 
        assume the function name and suppose the implementation works by firing the 
        PropertyChange event in a proper and consistent way. Below a model class that already implements INotifyPropertyChanged:&nbsp;
    </p>
    <pre lang="C#">
        public class ModelSample:INotifyPropertyChanged
        {
            public virtual int MyProperty1 { get; set; }
            public virtual double MyProperty2 { get; set; }
            public virtual DateTime MyProperty3 { get; set; }
            public float NoNotify { get; set; }
            #region INotifyPropertyChanged Members

            public event PropertyChangedEventHandler PropertyChanged;

            #endregion

            /* Since this class already implements INotifyPropertyChanged
             * having this function is mandatory
             */
            protected virtual void OnPropertyChanged(string property)
            {
                if (null != PropertyChanged)
                    PropertyChanged(this, new PropertyChangedEventArgs(property));
            }
        }
    </pre>
   


<p>
The code below derive a class from Customer and wires the code to fire the PropertyChanged event every time we set a property value with a different value.
Please note than the TypeFactory class is in a certain sense fault tolerant: .
If the interface is implemented, implementing the <b>OnPropertyChanged(string propName)</b> is mandatory.We 
    can leverage fault tolerancy in order to avoid notification for certain properties: 
    just declare them as non virtual.
</p>
<pre lang="C#">
 Customer model = Activator.CreateInstance(
                TypeFactory.AutoNotifier&lt;Customer&gt;()
                );
</pre>

<h2>How It Works</h2>
The <b>AutoNotifyPropertyChange.TypeFactory</b> class uses CodeDom to internally generate a subclass of the model and wire the code in the property setter. 
    Class is internally compiled and returned as a type.
Let's see this example (POCO) class:
<pre lang="C#">
    public class ClockViewModel
    {

        public virtual int Hour { get; set; }
        public virtual int Minute { get; set; }
        public virtual int Second { get; set; }
        public virtual int Millisecond { get; set; }
        public virtual int Centiseconds { get { return Millisecond / 10; } }
        
    }
</pre>

and see the autogenerated class ( you will never have to use this code, is just to show what happen behind the scenes ):
<pre lang="C#">
namespace @__autonotifypropertychanged
{
    
    
    internal class @__autonotifyClockViewModel : Autonotify.Demo.ClockViewModel, System.ComponentModel.INotifyPropertyChanged
    {
        
        public override int Hour
        {
            get
            {
                return base.Hour;
            }
            set
            {
                if ((false == base.Hour.Equals(value)))
                {
                    base.Hour = value;
                    this.OnPropertyChanged("Hour");
                }
            }
        }
        
        public override int Minute
        {
            get
            {
                return base.Minute;
            }
            set
            {
                if ((false == base.Minute.Equals(value)))
                {
                    base.Minute = value;
                    this.OnPropertyChanged("Minute");
                }
            }
        }
        
        public override int Second
        {
            get
            {
                return base.Second;
            }
            set
            {
                if ((false == base.Second.Equals(value)))
                {
                    base.Second = value;
                    this.OnPropertyChanged("Second");
                }
            }
        }
        
        public override int Millisecond
        {
            get
            {
                return base.Millisecond;
            }
            set
            {
                if ((false == base.Millisecond.Equals(value)))
                {
                    base.Millisecond = value;
                    this.OnPropertyChanged("Millisecond");
                    this.OnPropertyChanged("Centiseconds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void OnPropertyChanged(string propertyName)
        {
            if ((null != this.PropertyChanged))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
</pre>
    <p>
        All the plumbing is done and you obtain a proxy implementing 
        INotifyPropertyChange.&nbsp; You probably noted that the property &quot;Centiseconds&quot; 
        is a read only calculated property, but in the generated code we see the event 
        raising in the correct place: changing the milliseconds force a change to the 
        Centiseconds property too. This is because internally the proxy generator 
        investigates the code for avery property getter in order to see if they use 
        other property value, if so the property is consider to be dependent, and proper 
        event are fired. The inflector does not look at the code behavior, it simply 
        assumes than if a getter is used then this will influence the result ( this is 
        correct while we are not using a property value inside a getter to produce some 
        side effect, in this case a change event will be fired without reason, but in 
        such a situation this will probably not be an issue ).</p>
    <p>
        To create the proxy, just write this:</p>
    <pre lang="C#">
         var obj = Activator.CreateInstance( 
        AutoNotifyPropertyChange.TypeFactory.AutoNotifier&lt;ClockViewModel&gt;() );</pre>
Autogenerated classes are cached internally, so asking many time for the same type does not requires the code for the proxy to recreate and rebuild.




<h2>Points of Interest</h2>

    <p>
        The code is compiled as a Dll, but the classes for the proxy are just a few and 
        can be merged into an existing solution code without any pain, there is no 
        additional dependencies. In the sample application provided a binding with a 
        simple view is shown, using the ClockViewModel.</p>

</body></html>