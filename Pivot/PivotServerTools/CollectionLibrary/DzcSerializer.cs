using System;
using System.Drawing;
using System.IO;
using System.Xml;
using ImageProviderForItem;

namespace CollectionLibrary
{
	class AllCollectionDefaults
	{
		public const int CollectionTileMaxLevel = 8;
		public const int CollectionTileSize = 256; //(int)Math.Pow(2, 8);
		public const string CollectionTileFormat = "jpg";
		public const bool DziAutoGenerated = true;
	}

	// Serialize a Collection's image data into Deep Zoom Collection XML.
	// Reference: http://www.getpivot.com/developer-info/image-content.aspx
	internal class DzcSerializer
	{
		private string Xmlns { get { return "http://schemas.microsoft.com/deepzoom/2008"; } }
		private XmlWriter _w;
		private PivotCollection _collection;

		private DzcSerializer(PivotCollection collection)
		{
			_collection = collection;
		}

		// Write a collection's image data as a DZC to an XmlWriter
		public static void Serialize(PivotCollection collection, XmlWriter xmlWriter)
		{
			DzcSerializer serializer = new DzcSerializer(collection);
			serializer.Write(xmlWriter);
		}

		// Write a collection's image data as a DZC to a Stream
		public static void Serialize(PivotCollection collection, Stream stream)
		{
			XmlWriterSettings settings = new XmlWriterSettings();
			settings.Indent = true;
			settings.IndentChars = string.Empty;
			settings.NewLineChars = Environment.NewLine;
			using (XmlWriter xmlWriter = XmlWriter.Create(stream, settings))
			{
				Serialize(collection, xmlWriter);
			}
		}

		private void Write(XmlWriter writer)
		{
			try
			{
				_w = writer;
				_w.WriteStartDocument();
					WriteCollectionElement();
				_w.WriteEndDocument();
			}
			catch (Exception ex)
			{
				ex.GetType();
			}
		}

		private void WriteCollectionElement()
		{
			_w.WriteStartElement("Collection", Xmlns);
			_w.WriteAttributeString("MaxLevel", AllCollectionDefaults.CollectionTileMaxLevel.ToString());
			_w.WriteAttributeString("TileSize", AllCollectionDefaults.CollectionTileSize.ToString());
			_w.WriteAttributeString("Format", AllCollectionDefaults.CollectionTileFormat.ToString());
				_w.WriteAttributeString("NextItemId", "0"); //j I dare PivotViewer to look at this attribute; it was incorrectly set to _collection.Items.Count);
				WriteItemsElement();
			_w.WriteEndElement(); // Collection
		}

		private void WriteItemsElement()
		{
			_w.WriteStartElement("Items");
			foreach (Item item in _collection.Items)
					WriteItemElement(item);
			_w.WriteEndElement(); // Items
		}

		private void WriteItemElement(Item item)
		{
			Size size = item.ItemImage.GetImageSize();
			string source = null;
			if (item.ItemImage.Path.EndsWith(".dzi", StringComparison.InvariantCultureIgnoreCase))
				source = (item.ItemImage.IsFile ? "file://" + item.ItemImage.Path : item.ItemImage.Path);
			if (source == null && AllCollectionDefaults.DziAutoGenerated && (size.Width > AllCollectionDefaults.CollectionTileSize || size.Height > AllCollectionDefaults.CollectionTileSize))
				source = _collection.MakeDziPath(item.ImageID);

			_w.WriteStartElement("I");
			_w.WriteAttributeString("Id", item.UniqueID.ToString()); // This ID must match the #(ID) in the CXML file
			_w.WriteAttributeString("N", item.ImageID.ToString()); //  This is the Morton number that selects a collection tile
				_w.WriteAttributeString("Source", source);
				_w.WriteStartElement("Size");
					_w.WriteAttributeString("Width", size.Width.ToString());
					_w.WriteAttributeString("Height", size.Height.ToString());
				_w.WriteEndElement(); // Size
			_w.WriteEndElement(); // I
		}
	}
}
