/* This header file machine-generated by mktyplib.exe */
/* Interface to type library: QuartzTypeLib */

#ifndef _QuartzTypeLib_H_
#define _QuartzTypeLib_H_

DEFINE_GUID(LIBID_QuartzTypeLib,0x56A868B0L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

typedef double REFTIME;

typedef long OAEVENT;

typedef long OAHWND;

typedef long OAFilterState;

DEFINE_GUID(IID_IAMCollection,0x56A868B9L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IAMCollection */
#undef INTERFACE
#define INTERFACE IAMCollection

DECLARE_INTERFACE_(IAMCollection, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMCollection methods */
    STDMETHOD(get_Count)(THIS_ long FAR* plCount) PURE;
    STDMETHOD(Item)(THIS_ long lItem, IUnknown * FAR* ppUnk) PURE;
    STDMETHOD(get__NewEnum)(THIS_ IUnknown * FAR* ppUnk) PURE;
};

DEFINE_GUID(IID_IMediaControl,0x56A868B1L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IMediaControl */
#undef INTERFACE
#define INTERFACE IMediaControl

DECLARE_INTERFACE_(IMediaControl, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IMediaControl methods */
    STDMETHOD(Run)(THIS) PURE;
    STDMETHOD(Pause)(THIS) PURE;
    STDMETHOD(Stop)(THIS) PURE;
    STDMETHOD(GetState)(THIS_ long msTimeout, OAFilterState FAR* pfs) PURE;
    STDMETHOD(RenderFile)(THIS_ BSTR strFilename) PURE;
    STDMETHOD(AddSourceFilter)(THIS_ BSTR strFilename, IDispatch * FAR* ppUnk) PURE;
    STDMETHOD(get_FilterCollection)(THIS_ IDispatch * FAR* ppUnk) PURE;
    STDMETHOD(get_RegFilterCollection)(THIS_ IDispatch * FAR* ppUnk) PURE;
    STDMETHOD(StopWhenReady)(THIS) PURE;
};

DEFINE_GUID(IID_IMediaEvent,0x56A868B6L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IMediaEvent */
#undef INTERFACE
#define INTERFACE IMediaEvent

DECLARE_INTERFACE_(IMediaEvent, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IMediaEvent methods */
    STDMETHOD(GetEventHandle)(THIS_ OAEVENT FAR* hEvent) PURE;
    STDMETHOD(GetEvent)(THIS_ long FAR* lEventCode, long FAR* lParam1, long FAR* lParam2, long msTimeout) PURE;
    STDMETHOD(WaitForCompletion)(THIS_ long msTimeout, long FAR* pEvCode) PURE;
    STDMETHOD(CancelDefaultHandling)(THIS_ long lEvCode) PURE;
    STDMETHOD(RestoreDefaultHandling)(THIS_ long lEvCode) PURE;
    STDMETHOD(FreeEventParams)(THIS_ long lEvCode, long lParam1, long lParam2) PURE;
};

DEFINE_GUID(IID_IMediaEventEx,0x56A868C0L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IMediaEventEx */
#undef INTERFACE
#define INTERFACE IMediaEventEx

DECLARE_INTERFACE_(IMediaEventEx, IMediaEvent)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;

    /* IMediaEvent methods */
    STDMETHOD(GetEventHandle)(THIS_ OAEVENT FAR* hEvent) PURE;
    STDMETHOD(GetEvent)(THIS_ long FAR* lEventCode, long FAR* lParam1, long FAR* lParam2, long msTimeout) PURE;
    STDMETHOD(WaitForCompletion)(THIS_ long msTimeout, long FAR* pEvCode) PURE;
    STDMETHOD(CancelDefaultHandling)(THIS_ long lEvCode) PURE;
    STDMETHOD(RestoreDefaultHandling)(THIS_ long lEvCode) PURE;
    STDMETHOD(FreeEventParams)(THIS_ long lEvCode, long lParam1, long lParam2) PURE;
#endif

    /* IMediaEventEx methods */
    STDMETHOD(SetNotifyWindow)(THIS_ OAHWND hwnd, long lMsg, long lInstanceData) PURE;
};

DEFINE_GUID(IID_IMediaPosition,0x56A868B2L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IMediaPosition */
#undef INTERFACE
#define INTERFACE IMediaPosition

DECLARE_INTERFACE_(IMediaPosition, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IMediaPosition methods */
    STDMETHOD(get_Duration)(THIS_ REFTIME FAR* plength) PURE;
    STDMETHOD(put_CurrentPosition)(THIS_ REFTIME llTime) PURE;
    STDMETHOD(get_CurrentPosition)(THIS_ REFTIME FAR* pllTime) PURE;
    STDMETHOD(get_StopTime)(THIS_ REFTIME FAR* pllTime) PURE;
    STDMETHOD(put_StopTime)(THIS_ REFTIME llTime) PURE;
    STDMETHOD(get_PrerollTime)(THIS_ REFTIME FAR* pllTime) PURE;
    STDMETHOD(put_PrerollTime)(THIS_ REFTIME llTime) PURE;
    STDMETHOD(put_Rate)(THIS_ double dRate) PURE;
    STDMETHOD(get_Rate)(THIS_ double FAR* pdRate) PURE;
    STDMETHOD(CanSeekForward)(THIS_ long FAR* pCanSeekForward) PURE;
    STDMETHOD(CanSeekBackward)(THIS_ long FAR* pCanSeekBackward) PURE;
};

DEFINE_GUID(IID_IBasicAudio,0x56A868B3L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IBasicAudio */
#undef INTERFACE
#define INTERFACE IBasicAudio

DECLARE_INTERFACE_(IBasicAudio, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IBasicAudio methods */
    STDMETHOD(put_Volume)(THIS_ long lVolume) PURE;
    STDMETHOD(get_Volume)(THIS_ long FAR* plVolume) PURE;
    STDMETHOD(put_Balance)(THIS_ long lBalance) PURE;
    STDMETHOD(get_Balance)(THIS_ long FAR* plBalance) PURE;
};

DEFINE_GUID(IID_IVideoWindow,0x56A868B4L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IVideoWindow */
#undef INTERFACE
#define INTERFACE IVideoWindow

DECLARE_INTERFACE_(IVideoWindow, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IVideoWindow methods */
    STDMETHOD(put_Caption)(THIS_ BSTR strCaption) PURE;
    STDMETHOD(get_Caption)(THIS_ BSTR FAR* strCaption) PURE;
    STDMETHOD(put_WindowStyle)(THIS_ long WindowStyle) PURE;
    STDMETHOD(get_WindowStyle)(THIS_ long FAR* WindowStyle) PURE;
    STDMETHOD(put_WindowStyleEx)(THIS_ long WindowStyleEx) PURE;
    STDMETHOD(get_WindowStyleEx)(THIS_ long FAR* WindowStyleEx) PURE;
    STDMETHOD(put_AutoShow)(THIS_ long AutoShow) PURE;
    STDMETHOD(get_AutoShow)(THIS_ long FAR* AutoShow) PURE;
    STDMETHOD(put_WindowState)(THIS_ long WindowState) PURE;
    STDMETHOD(get_WindowState)(THIS_ long FAR* WindowState) PURE;
    STDMETHOD(put_BackgroundPalette)(THIS_ long BackgroundPalette) PURE;
    STDMETHOD(get_BackgroundPalette)(THIS_ long FAR* pBackgroundPalette) PURE;
    STDMETHOD(put_Visible)(THIS_ long Visible) PURE;
    STDMETHOD(get_Visible)(THIS_ long FAR* pVisible) PURE;
    STDMETHOD(put_Left)(THIS_ long Left) PURE;
    STDMETHOD(get_Left)(THIS_ long FAR* pLeft) PURE;
    STDMETHOD(put_Width)(THIS_ long Width) PURE;
    STDMETHOD(get_Width)(THIS_ long FAR* pWidth) PURE;
    STDMETHOD(put_Top)(THIS_ long Top) PURE;
    STDMETHOD(get_Top)(THIS_ long FAR* pTop) PURE;
    STDMETHOD(put_Height)(THIS_ long Height) PURE;
    STDMETHOD(get_Height)(THIS_ long FAR* pHeight) PURE;
    STDMETHOD(put_Owner)(THIS_ OAHWND Owner) PURE;
    STDMETHOD(get_Owner)(THIS_ OAHWND FAR* Owner) PURE;
    STDMETHOD(put_MessageDrain)(THIS_ OAHWND Drain) PURE;
    STDMETHOD(get_MessageDrain)(THIS_ OAHWND FAR* Drain) PURE;
    STDMETHOD(get_BorderColor)(THIS_ long FAR* Color) PURE;
    STDMETHOD(put_BorderColor)(THIS_ long Color) PURE;
    STDMETHOD(get_FullScreenMode)(THIS_ long FAR* FullScreenMode) PURE;
    STDMETHOD(put_FullScreenMode)(THIS_ long FullScreenMode) PURE;
    STDMETHOD(SetWindowForeground)(THIS_ long Focus) PURE;
    STDMETHOD(NotifyOwnerMessage)(THIS_ long hwnd, long uMsg, long wParam, long lParam) PURE;
    STDMETHOD(SetWindowPosition)(THIS_ long Left, long Top, long Width, long Height) PURE;
    STDMETHOD(GetWindowPosition)(THIS_ long FAR* pLeft, long FAR* pTop, long FAR* pWidth, long FAR* pHeight) PURE;
    STDMETHOD(GetMinIdealImageSize)(THIS_ long FAR* pWidth, long FAR* pHeight) PURE;
    STDMETHOD(GetMaxIdealImageSize)(THIS_ long FAR* pWidth, long FAR* pHeight) PURE;
    STDMETHOD(GetRestorePosition)(THIS_ long FAR* pLeft, long FAR* pTop, long FAR* pWidth, long FAR* pHeight) PURE;
    STDMETHOD(HideCursor)(THIS_ long HideCursor) PURE;
    STDMETHOD(IsCursorHidden)(THIS_ long FAR* CursorHidden) PURE;
};

DEFINE_GUID(IID_IBasicVideo,0x56A868B5L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IBasicVideo */
#undef INTERFACE
#define INTERFACE IBasicVideo

DECLARE_INTERFACE_(IBasicVideo, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IBasicVideo methods */
    STDMETHOD(get_AvgTimePerFrame)(THIS_ REFTIME FAR* pAvgTimePerFrame) PURE;
    STDMETHOD(get_BitRate)(THIS_ long FAR* pBitRate) PURE;
    STDMETHOD(get_BitErrorRate)(THIS_ long FAR* pBitErrorRate) PURE;
    STDMETHOD(get_VideoWidth)(THIS_ long FAR* pVideoWidth) PURE;
    STDMETHOD(get_VideoHeight)(THIS_ long FAR* pVideoHeight) PURE;
    STDMETHOD(put_SourceLeft)(THIS_ long SourceLeft) PURE;
    STDMETHOD(get_SourceLeft)(THIS_ long FAR* pSourceLeft) PURE;
    STDMETHOD(put_SourceWidth)(THIS_ long SourceWidth) PURE;
    STDMETHOD(get_SourceWidth)(THIS_ long FAR* pSourceWidth) PURE;
    STDMETHOD(put_SourceTop)(THIS_ long SourceTop) PURE;
    STDMETHOD(get_SourceTop)(THIS_ long FAR* pSourceTop) PURE;
    STDMETHOD(put_SourceHeight)(THIS_ long SourceHeight) PURE;
    STDMETHOD(get_SourceHeight)(THIS_ long FAR* pSourceHeight) PURE;
    STDMETHOD(put_DestinationLeft)(THIS_ long DestinationLeft) PURE;
    STDMETHOD(get_DestinationLeft)(THIS_ long FAR* pDestinationLeft) PURE;
    STDMETHOD(put_DestinationWidth)(THIS_ long DestinationWidth) PURE;
    STDMETHOD(get_DestinationWidth)(THIS_ long FAR* pDestinationWidth) PURE;
    STDMETHOD(put_DestinationTop)(THIS_ long DestinationTop) PURE;
    STDMETHOD(get_DestinationTop)(THIS_ long FAR* pDestinationTop) PURE;
    STDMETHOD(put_DestinationHeight)(THIS_ long DestinationHeight) PURE;
    STDMETHOD(get_DestinationHeight)(THIS_ long FAR* pDestinationHeight) PURE;
    STDMETHOD(SetSourcePosition)(THIS_ long Left, long Top, long Width, long Height) PURE;
    STDMETHOD(GetSourcePosition)(THIS_ long FAR* pLeft, long FAR* pTop, long FAR* pWidth, long FAR* pHeight) PURE;
    STDMETHOD(SetDefaultSourcePosition)(THIS) PURE;
    STDMETHOD(SetDestinationPosition)(THIS_ long Left, long Top, long Width, long Height) PURE;
    STDMETHOD(GetDestinationPosition)(THIS_ long FAR* pLeft, long FAR* pTop, long FAR* pWidth, long FAR* pHeight) PURE;
    STDMETHOD(SetDefaultDestinationPosition)(THIS) PURE;
    STDMETHOD(GetVideoSize)(THIS_ long FAR* pWidth, long FAR* pHeight) PURE;
    STDMETHOD(GetVideoPaletteEntries)(THIS_ long StartIndex, long Entries, long FAR* pRetrieved, long FAR* pPalette) PURE;
    STDMETHOD(GetCurrentImage)(THIS_ long FAR* pBufferSize, long FAR* pDIBImage) PURE;
    STDMETHOD(IsUsingDefaultSource)(THIS) PURE;
    STDMETHOD(IsUsingDefaultDestination)(THIS) PURE;
};

DEFINE_GUID(IID_IDeferredCommand,0x56A868B8L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IDeferredCommand */
#undef INTERFACE
#define INTERFACE IDeferredCommand

DECLARE_INTERFACE_(IDeferredCommand, IUnknown)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* IDeferredCommand methods */
    STDMETHOD(Cancel)(THIS) PURE;
    STDMETHOD(Confidence)(THIS_ long FAR* pConfidence) PURE;
    STDMETHOD(Postpone)(THIS_ REFTIME newtime) PURE;
    STDMETHOD(GetHResult)(THIS_ HRESULT FAR* phrResult) PURE;
};

DEFINE_GUID(IID_IQueueCommand,0x56A868B7L,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IQueueCommand */
#undef INTERFACE
#define INTERFACE IQueueCommand

DECLARE_INTERFACE_(IQueueCommand, IUnknown)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;
#endif

    /* IQueueCommand methods */
    STDMETHOD(InvokeAtStreamTime)(THIS_ IDeferredCommand FAR* FAR* pCmd, REFTIME time, GUID FAR* iid, long dispidMethod, short wFlags, long cArgs, VARIANT FAR* pDispParams, VARIANT FAR* pvarResult, short FAR* puArgErr) PURE;
    STDMETHOD(InvokeAtPresentationTime)(THIS_ IDeferredCommand FAR* FAR* pCmd, REFTIME time, GUID FAR* iid, long dispidMethod, short wFlags, long cArgs, VARIANT FAR* pDispParams, VARIANT FAR* pvarResult, short FAR* puArgErr) PURE;
};

DEFINE_GUID(CLSID_FilgraphManager,0xE436EBB3L,0x524F,0x11CE,0x9F,0x53,0x00,0x20,0xAF,0x0B,0xA7,0x70);

#ifdef __cplusplus
class FilgraphManager;
#endif

DEFINE_GUID(IID_IFilterInfo,0x56A868BAL,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IFilterInfo */
#undef INTERFACE
#define INTERFACE IFilterInfo

DECLARE_INTERFACE_(IFilterInfo, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IFilterInfo methods */
    STDMETHOD(FindPin)(THIS_ BSTR strPinID, IDispatch * FAR* ppUnk) PURE;
    STDMETHOD(get_Name)(THIS_ BSTR FAR* strName) PURE;
    STDMETHOD(get_VendorInfo)(THIS_ BSTR FAR* strVendorInfo) PURE;
    STDMETHOD(get_Filter)(THIS_ IUnknown * FAR* ppUnk) PURE;
    STDMETHOD(get_Pins)(THIS_ IDispatch * FAR* ppUnk) PURE;
    STDMETHOD(get_IsFileSource)(THIS_ long FAR* pbIsSource) PURE;
    STDMETHOD(get_Filename)(THIS_ BSTR FAR* pstrFilename) PURE;
    STDMETHOD(put_Filename)(THIS_ BSTR strFilename) PURE;
};

DEFINE_GUID(IID_IRegFilterInfo,0x56A868BBL,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IRegFilterInfo */
#undef INTERFACE
#define INTERFACE IRegFilterInfo

DECLARE_INTERFACE_(IRegFilterInfo, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IRegFilterInfo methods */
    STDMETHOD(get_Name)(THIS_ BSTR FAR* strName) PURE;
    STDMETHOD(Filter)(THIS_ IDispatch * FAR* ppUnk) PURE;
};

DEFINE_GUID(IID_IMediaTypeInfo,0x56A868BCL,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IMediaTypeInfo */
#undef INTERFACE
#define INTERFACE IMediaTypeInfo

DECLARE_INTERFACE_(IMediaTypeInfo, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IMediaTypeInfo methods */
    STDMETHOD(get_Type)(THIS_ BSTR FAR* strType) PURE;
    STDMETHOD(get_Subtype)(THIS_ BSTR FAR* strType) PURE;
};

DEFINE_GUID(IID_IPinInfo,0x56A868BDL,0x0AD4,0x11CE,0xB0,0x3A,0x00,0x20,0xAF,0x0B,0xA7,0x70);

/* Definition of interface: IPinInfo */
#undef INTERFACE
#define INTERFACE IPinInfo

DECLARE_INTERFACE_(IPinInfo, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IPinInfo methods */
    STDMETHOD(get_Pin)(THIS_ IUnknown * FAR* ppUnk) PURE;
    STDMETHOD(get_ConnectedTo)(THIS_ IDispatch * FAR* ppUnk) PURE;
    STDMETHOD(get_ConnectionMediaType)(THIS_ IDispatch * FAR* ppUnk) PURE;
    STDMETHOD(get_FilterInfo)(THIS_ IDispatch * FAR* ppUnk) PURE;
    STDMETHOD(get_Name)(THIS_ BSTR FAR* ppUnk) PURE;
    STDMETHOD(get_Direction)(THIS_ long FAR* ppDirection) PURE;
    STDMETHOD(get_PinID)(THIS_ BSTR FAR* strPinID) PURE;
    STDMETHOD(get_MediaTypes)(THIS_ IDispatch * FAR* ppUnk) PURE;
    STDMETHOD(Connect)(THIS_ IUnknown * pPin) PURE;
    STDMETHOD(ConnectDirect)(THIS_ IUnknown * pPin) PURE;
    STDMETHOD(ConnectWithType)(THIS_ IUnknown * pPin, IDispatch * pMediaType) PURE;
    STDMETHOD(Disconnect)(THIS) PURE;
    STDMETHOD(Render)(THIS) PURE;
};

typedef enum {
    AnalogVideo_NTSC_M = 1,
    AnalogVideo_PAL_B = 2,
    AnalogVideo_PAL_D = 4,
    AnalogVideo_PAL_H = 8,
    AnalogVideo_PAL_I = 16,
    AnalogVideo_PAL_M = 32,
    AnalogVideo_PAL_N = 64,
    AnalogVideo_SECAM_B = 128,
    AnalogVideo_SECAM_D = 256,
    AnalogVideo_SECAM_G = 512,
    AnalogVideo_SECAM_H = 1024,
    AnalogVideo_SECAM_K = 2048,
    AnalogVideo_SECAM_K1 = 4096,
    AnalogVideo_SECAM_L = 8192
} AnalogVideoStandard;

typedef enum {
    TunerInputCable,
    TunerInputAntenna
} TunerInputType;

typedef enum {
    VideoCopyProtectionMacrovisionBasic,
    VideoCopyProtectionMacrovisionCBI
} VideoCopyProtectionType;

typedef enum {
    PhysConn_Video_Tuner = 1,
    PhysConn_Video_Composite,
    PhysConn_Video_SVideo,
    PhysConn_Video_RGB,
    PhysConn_Video_YRYBY,
    PhysConn_Video_SerialDigital,
    PhysConn_Video_ParallelDigital,
    PhysConn_Video_SCSI,
    PhysConn_Video_AUX,
    PhysConn_Video_1394,
    PhysConn_Video_USB,
    PhysConn_Video_VideoDecoder,
    PhysConn_Video_VideoEncoder,
    PhysConn_Video_SCART,
    PhysConn_Audio_Tuner = 4096,
    PhysConn_Audio_Line,
    PhysConn_Audio_Mic,
    PhysConn_Audio_AESDigital,
    PhysConn_Audio_SPDIFDigital,
    PhysConn_Audio_SCSI,
    PhysConn_Audio_AUX,
    PhysConn_Audio_1394,
    PhysConn_Audio_USB,
    PhysConn_Audio_AudioDecoder
} PhysicalConnectorType;

typedef enum {
    CompressionCaps_CanQuality = 1,
    CompressionCaps_CanCrunch = 2,
    CompressionCaps_CanKeyFrame = 4,
    CompressionCaps_CanBFrame = 8
} CompressionCaps;

DEFINE_GUID(IID_IAMVideoCompression,0xC6E13343L,0x30AC,0x11D0,0xA1,0x8C,0x00,0xA0,0xC9,0x11,0x89,0x56);

/* Definition of interface: IAMVideoCompression */
#undef INTERFACE
#define INTERFACE IAMVideoCompression

DECLARE_INTERFACE_(IAMVideoCompression, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMVideoCompression methods */
    STDMETHOD(put_KeyFrameRate)(THIS_ long KeyFrameRate) PURE;
    STDMETHOD(get_KeyFrameRate)(THIS_ long FAR* pKeyFrameRate) PURE;
    STDMETHOD(put_PFramesPerKeyFrame)(THIS_ long PFramesPerKeyFrame) PURE;
    STDMETHOD(get_PFramesPerKeyFrame)(THIS_ long FAR* pPFramesPerKeyFrame) PURE;
    STDMETHOD(put_Quality)(THIS_ double Quality) PURE;
    STDMETHOD(get_Quality)(THIS_ double FAR* pQuality) PURE;
    STDMETHOD(GetInfo)(THIS_ BSTR FAR* pstrVersion, BSTR FAR* pstrDescription, long FAR* pDefaultKeyFrameRate, long FAR* pDefaultPFramesPerKey, double FAR* pDefaultQuality, long FAR* pCapabilities) PURE;
    STDMETHOD(OverrideKeyFrame)(THIS_ long FrameNumber) PURE;
    STDMETHOD(OverrideFrameSize)(THIS_ long FrameNumber, long Size) PURE;
};

typedef enum {
    VfwCaptureDialog_Source = 1,
    VfwCaptureDialog_Format = 2,
    VfwCaptureDialog_Display = 4
} VfwCaptureDialogs;

typedef enum {
    VfwCompressDialog_Config = 1,
    VfwCompressDialog_About = 2
} VfwCompressDialogs;

DEFINE_GUID(IID_IAMVfwCaptureDialogs,0xD8D715A0L,0x6E5E,0x11D0,0xB3,0xF0,0x00,0xAA,0x00,0x37,0x61,0xC5);

/* Definition of interface: IAMVfwCaptureDialogs */
#undef INTERFACE
#define INTERFACE IAMVfwCaptureDialogs

DECLARE_INTERFACE_(IAMVfwCaptureDialogs, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMVfwCaptureDialogs methods */
    STDMETHOD(HasDialog)(THIS_ int iDialog) PURE;
    STDMETHOD(ShowDialog)(THIS_ int iDialog, long hwnd) PURE;
    STDMETHOD(SendDriverMessage)(THIS_ int iDialog, int uMsg, long dw1, long dw2) PURE;
};

DEFINE_GUID(IID_IAMVfwCompressDialogs,0xD8D715A3L,0x6E5E,0x11D0,0xB3,0xF0,0x00,0xAA,0x00,0x37,0x61,0xC5);

/* Definition of interface: IAMVfwCompressDialogs */
#undef INTERFACE
#define INTERFACE IAMVfwCompressDialogs

DECLARE_INTERFACE_(IAMVfwCompressDialogs, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMVfwCompressDialogs methods */
    STDMETHOD(ShowDialog)(THIS_ int iDialog, long hwnd) PURE;
    STDMETHOD(SendDriverMessage)(THIS_ int uMsg, long dw1, long dw2) PURE;
};

DEFINE_GUID(IID_IAMDroppedFrames,0xC6E13344L,0x30AC,0x11D0,0xA1,0x8C,0x00,0xA0,0xC9,0x11,0x89,0x56);

/* Definition of interface: IAMDroppedFrames */
#undef INTERFACE
#define INTERFACE IAMDroppedFrames

DECLARE_INTERFACE_(IAMDroppedFrames, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMDroppedFrames methods */
    STDMETHOD(GetNumDropped)(THIS_ long FAR* plDropped) PURE;
    STDMETHOD(GetNumNotDropped)(THIS_ long FAR* plNotDropped) PURE;
    STDMETHOD(GetDroppedInfo)(THIS_ long lSize, long FAR* plArray, long FAR* plNumCopied) PURE;
    STDMETHOD(GetAverageFrameSize)(THIS_ long FAR* plAverageSize) PURE;
};

typedef enum {
    AMF_AUTOMATICGAIN = -1
} Mix_Flags;

DEFINE_GUID(IID_IAMAudioInputMixer,0x54C39221L,0x8380,0x11D0,0xB3,0xF0,0x00,0xAA,0x00,0x37,0x61,0xC5);

/* Definition of interface: IAMAudioInputMixer */
#undef INTERFACE
#define INTERFACE IAMAudioInputMixer

DECLARE_INTERFACE_(IAMAudioInputMixer, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMAudioInputMixer methods */
    STDMETHOD(put_Enable)(THIS_ int fEnable) PURE;
    STDMETHOD(get_Enable)(THIS_ int FAR* pfEnable) PURE;
    STDMETHOD(put_Mono)(THIS_ int fMono) PURE;
    STDMETHOD(get_Mono)(THIS_ int FAR* pfMono) PURE;
    STDMETHOD(put_MixLevel)(THIS_ double Level) PURE;
    STDMETHOD(get_MixLevel)(THIS_ double FAR* pLevel) PURE;
    STDMETHOD(put_Pan)(THIS_ double Pan) PURE;
    STDMETHOD(get_Pan)(THIS_ double FAR* pPan) PURE;
    STDMETHOD(put_Loudness)(THIS_ int fLoudness) PURE;
    STDMETHOD(get_Loudness)(THIS_ int FAR* pfLoudness) PURE;
    STDMETHOD(put_Treble)(THIS_ double Treble) PURE;
    STDMETHOD(get_Treble)(THIS_ double FAR* pTreble) PURE;
    STDMETHOD(get_TrebleRange)(THIS_ double FAR* pRange) PURE;
    STDMETHOD(put_Bass)(THIS_ double Bass) PURE;
    STDMETHOD(get_Bass)(THIS_ double FAR* pBass) PURE;
    STDMETHOD(get_BassRange)(THIS_ double FAR* pRange) PURE;
};

DEFINE_GUID(IID_IAMAnalogVideoDecoder,0xC6E13350L,0x30AC,0x11D0,0xA1,0x8C,0x00,0xA0,0xC9,0x11,0x89,0x56);

/* Definition of interface: IAMAnalogVideoDecoder */
#undef INTERFACE
#define INTERFACE IAMAnalogVideoDecoder

DECLARE_INTERFACE_(IAMAnalogVideoDecoder, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMAnalogVideoDecoder methods */
    STDMETHOD(get_AvailableTVFormats)(THIS_ long FAR* lAnalogVideoStandard) PURE;
    STDMETHOD(put_TVFormat)(THIS_ long lAnalogVideoStandard) PURE;
    STDMETHOD(get_TVFormat)(THIS_ long FAR* plAnalogVideoStandard) PURE;
    STDMETHOD(get_HorizontalLocked)(THIS_ long FAR* plLocked) PURE;
    STDMETHOD(put_VCRHorizontalLocking)(THIS_ long lVCRHorizontalLocking) PURE;
    STDMETHOD(get_VCRHorizontalLocking)(THIS_ long FAR* plVCRHorizontalLocking) PURE;
    STDMETHOD(put_HSyncPolarity)(THIS_ long lHSyncPolarity) PURE;
    STDMETHOD(get_HSyncPolarity)(THIS_ long FAR* plHSyncPolarity) PURE;
    STDMETHOD(put_VSyncPolarity)(THIS_ long lVSyncPolarity) PURE;
    STDMETHOD(get_VSyncPolarity)(THIS_ long FAR* plVSyncPolarity) PURE;
    STDMETHOD(get_NumberOfLines)(THIS_ long FAR* plNumberOfLines) PURE;
    STDMETHOD(put_OutputEnable)(THIS_ long lOutputEnable) PURE;
    STDMETHOD(get_OutputEnable)(THIS_ long FAR* plOutputEnable) PURE;
};

typedef enum {
    VideoProcAmp_Brightness = 1,
    VideoProcAmp_Contrast,
    VideoProcAmp_Hue,
    VideoProcAmp_Saturation,
    VideoProcAmp_Sharpness,
    VideoProcAmp_Gamma,
    VideoProcAmp_ColorEnable,
    VideoProcAmp_WhiteBalance,
    VideoProcAmp_BacklightCompensation
} VideoProcAmpProperty;

typedef enum {
    VideoProcAmp_Flags_Manual = 0,
    VideoProcAmp_Flags_Auto = 1,
    VideoProcAmp_Flags_Default = 4
} VideoProcAmpFlags;

DEFINE_GUID(IID_IAMVideoProcAmp,0xC6E13360L,0x30AC,0x11D0,0xA1,0x8C,0x00,0xA0,0xC9,0x11,0x89,0x56);

/* Definition of interface: IAMVideoProcAmp */
#undef INTERFACE
#define INTERFACE IAMVideoProcAmp

DECLARE_INTERFACE_(IAMVideoProcAmp, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMVideoProcAmp methods */
    STDMETHOD(GetRange)(THIS_ long FAR* pMin, long FAR* pMax, long FAR* pSteppingDelta, long FAR* pDefault, long FAR* pCapsFlags) PURE;
    STDMETHOD(Set)(THIS_ long Property, long lValue, long Flags) PURE;
    STDMETHOD(Get)(THIS_ long Property, long FAR* lValue) PURE;
};

typedef enum {
    CameraControl_Pan = 1,
    CameraControl_Tilt,
    CameraControl_Roll,
    CameraControl_Zoom,
    CameraControl_Exposure,
    CameraControl_Iris,
    CameraControl_Focus
} CameraControlProperty;

typedef enum {
    CameraControl_Flags_Manual = 0,
    CameraControl_Flags_Auto = 1,
    CameraControl_Flags_Default = 4,
    CameraControl_Flags_Absolute = 0,
    CameraControl_Flags_Relative = 16
} CameraControlFlags;

DEFINE_GUID(IID_IAMCameraControl,0xC6E13370L,0x30AC,0x11D0,0xA1,0x8C,0x00,0xA0,0xC9,0x11,0x89,0x56);

/* Definition of interface: IAMCameraControl */
#undef INTERFACE
#define INTERFACE IAMCameraControl

DECLARE_INTERFACE_(IAMCameraControl, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMCameraControl methods */
    STDMETHOD(GetRange)(THIS_ long FAR* pMin, long FAR* pMax, long FAR* pSteppingDelta, long FAR* pDefault, long FAR* pCapsFlags) PURE;
    STDMETHOD(Set)(THIS_ long Property, long lValue, long Flags) PURE;
    STDMETHOD(Get)(THIS_ long Property, long FAR* lValue) PURE;
};

DEFINE_GUID(IID_IAMCrossbar,0xC6E13380L,0x30AC,0x11D0,0xA1,0x8C,0x00,0xA0,0xC9,0x11,0x89,0x56);

/* Definition of interface: IAMCrossbar */
#undef INTERFACE
#define INTERFACE IAMCrossbar

DECLARE_INTERFACE_(IAMCrossbar, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMCrossbar methods */
    STDMETHOD(CanRoute)(THIS_ IUnknown * PinOut, IUnknown * PinIn) PURE;
    STDMETHOD(Route)(THIS_ IUnknown * PinOut, IUnknown * PinIn) PURE;
    STDMETHOD(get_IsRoutedTo)(THIS_ IUnknown * PinOut, IUnknown * FAR* pPinIn) PURE;
    STDMETHOD(get_RelatedPin)(THIS_ IUnknown * Pin, IUnknown * FAR* pPin) PURE;
};

DEFINE_GUID(IID_IAMTVTuner,0xC6E133A0L,0x30AC,0x11D0,0xA1,0x8C,0x00,0xA0,0xC9,0x11,0x89,0x56);

/* Definition of interface: IAMTVTuner */
#undef INTERFACE
#define INTERFACE IAMTVTuner

DECLARE_INTERFACE_(IAMTVTuner, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMTVTuner methods */
    STDMETHOD(get_AvailableTVFormats)(THIS_ long FAR* lAnalogVideoStandard) PURE;
    STDMETHOD(get_TVFormat)(THIS_ long FAR* plAnalogVideoStandard) PURE;
    STDMETHOD(put_Channel)(THIS_ long lChannel) PURE;
    STDMETHOD(get_Channel)(THIS_ long FAR* plChannel) PURE;
    STDMETHOD(ChannelMinMax)(THIS_ long FAR* lChannelMin, long FAR* lChannelMax) PURE;
    STDMETHOD(AutoTune)(THIS_ long lChannel, long FAR* plFoundSignal) PURE;
    STDMETHOD(StoreAutoTune)(THIS) PURE;
    STDMETHOD(put_CountryCode)(THIS_ long lCountryCode) PURE;
    STDMETHOD(get_CountryCode)(THIS_ long FAR* plCountryCode) PURE;
    STDMETHOD(put_TuningSpace)(THIS_ long lTuningSpace) PURE;
    STDMETHOD(get_TuningSpace)(THIS_ long FAR* plTuningSpace) PURE;
    STDMETHOD(get_NumInputConnections)(THIS_ long FAR* plNumInputConnections) PURE;
    STDMETHOD(put_InputType)(THIS_ long lIndex, TunerInputType InputType) PURE;
    STDMETHOD(get_InputType)(THIS_ long lIndex, TunerInputType FAR* pInputType) PURE;
    STDMETHOD(put_ConnectInput)(THIS_ long lIndex) PURE;
    STDMETHOD(get_ConnectInput)(THIS_ long FAR* plIndex) PURE;
    STDMETHOD(get_VideoFrequency)(THIS_ long FAR* lFreq) PURE;
    STDMETHOD(get_AudioFrequency)(THIS_ long FAR* lFreq) PURE;
};

DEFINE_GUID(IID_IAMAnalogVideoEncoder,0xC6E133B0L,0x30AC,0x11D0,0xA1,0x8C,0x00,0xA0,0xC9,0x11,0x89,0x56);

/* Definition of interface: IAMAnalogVideoEncoder */
#undef INTERFACE
#define INTERFACE IAMAnalogVideoEncoder

DECLARE_INTERFACE_(IAMAnalogVideoEncoder, IDispatch)
{
#ifndef NO_BASEINTERFACE_FUNCS

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, LPVOID FAR* ppvObj) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDispatch methods */
    STDMETHOD(GetTypeInfoCount)(THIS_ UINT FAR* pctinfo) PURE;

    STDMETHOD(GetTypeInfo)(
      THIS_
      UINT itinfo,
      LCID lcid,
      ITypeInfo FAR* FAR* pptinfo) PURE;

    STDMETHOD(GetIDsOfNames)(
      THIS_
      REFIID riid,
      OLECHAR FAR* FAR* rgszNames,
      UINT cNames,
      LCID lcid,
      DISPID FAR* rgdispid) PURE;

    STDMETHOD(Invoke)(
      THIS_
      DISPID dispidMember,
      REFIID riid,
      LCID lcid,
      WORD wFlags,
      DISPPARAMS FAR* pdispparams,
      VARIANT FAR* pvarResult,
      EXCEPINFO FAR* pexcepinfo,
      UINT FAR* puArgErr) PURE;
#endif

    /* IAMAnalogVideoEncoder methods */
    STDMETHOD(get_AvailableTVFormats)(THIS_ long FAR* lAnalogVideoStandard) PURE;
    STDMETHOD(put_TVFormat)(THIS_ long lAnalogVideoStandard) PURE;
    STDMETHOD(get_TVFormat)(THIS_ long FAR* plAnalogVideoStandard) PURE;
    STDMETHOD(put_CopyProtection)(THIS_ long lVideoCopyProtection) PURE;
    STDMETHOD(get_CopyProtection)(THIS_ long FAR* lVideoCopyProtection) PURE;
    STDMETHOD(put_CCEnable)(THIS_ long lCCEnable) PURE;
    STDMETHOD(get_CCEnable)(THIS_ long FAR* lCCEnable) PURE;
};

#endif
