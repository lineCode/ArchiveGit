/*led.c*/ 
#include "stdafx.h"
#include "windows.h"
#include "LED.h"


LEDCHAR LEDchars[] = {

{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{'!',0x04,0x04,0x04,0x04,0x00,0x00,0x04},
{' ',0x0a,0x0a,0x0a,0x00,0x00,0x00,0x00},
{'#',0x0a,0x0a,0x1f,0x0a,0x1f,0x0a,0x0a},
{'$',0x04,0x0f,0x14,0x0e,0x01,0x1e,0x04},
{'%',0x18,0x19,0x02,0x04,0x08,0x13,0x03},
{'&',0x0c,0x12,0x14,0x08,0x15,0x12,0x0d},
{0x27,0x18,0x08,0x10,0x0,0x00,0x00,0x00},
{'(',0x04,0x08,0x10,0x10,0x10,0x08,0x04},
{')',0x04,0x02,0x01,0x01,0x01,0x02,0x04},
{'*',0x00,0x04,0x15,0x0e,0x15,0x04,0x00},
{'+',0x00,0x04,0x04,0x1f,0x04,0x04,0x00},
{',',0x00,0x00,0x00,0x00,0x06,0x02,0x04},
{'-',0x00,0x00,0x00,0x1f,0x00,0x00,0x00},
{'.',0x00,0x00,0x00,0x00,0x00,0x0c,0x0c},
{'/',0x00,0x01,0x02,0x04,0x08,0x10,0x00},
{'0',0x0e,0x11,0x13,0x15,0x19,0x11,0x0e},
{'1',0x04,0x0c,0x04,0x04,0x04,0x04,0x0e},
{'2',0x0e,0x11,0x01,0x02,0x04,0x08,0x1f},
{'3',0x1f,0x02,0x04,0x02,0x01,0x11,0x0e},
{'4',0x02,0x06,0x0a,0x12,0x1f,0x02,0x02},
{'5',0x1f,0x10,0x1e,0x01,0x01,0x11,0x0e},
{'6',0x06,0x08,0x10,0x1e,0x11,0x11,0x0e},
{'7',0x1f,0x01,0x02,0x04,0x08,0x08,0x08},
{'8',0x0e,0x11,0x11,0x0e,0x11,0x11,0x0e},
{'9',0x0e,0x11,0x11,0x0f,0x01,0x02,0x0c},
{':',0x00,0x0c,0x0c,0x00,0x0c,0x0c,0x00},
{';',0x00,0x0c,0x0c,0x00,0x0c,0x04,0x08},
{'<',0x01,0x02,0x04,0x08,0x04,0x02,0x01},
{'=',0x00,0x00,0x1f,0x00,0x1f,0x00,0x00},
{'>',0x08,0x04,0x02,0x01,0x02,0x04,0x08},
{'?',0x0e,0x11,0x01,0x02,0x04,0x00,0x04},
{'@',0x0e,0x11,0x01,0x0d,0x15,0x15,0x0e},
{'A',0x0e,0x11,0x11,0x11,0x1f,0x11,0x11},
{'B',0x1e,0x11,0x11,0x1e,0x11,0x11,0x1e},
{'C',0x0e,0x11,0x10,0x10,0x10,0x11,0x0e},
{'D',0x1c,0x12,0x11,0x11,0x11,0x12,0x1c},
{'E',0x1f,0x10,0x10,0x1e,0x10,0x10,0x1f},
{'F',0x1f,0x10,0x10,0x1e,0x10,0x10,0x10},
{'G',0x0e,0x11,0x10,0x17,0x11,0x11,0x0f},
{'H',0x11,0x11,0x11,0x1f,0x11,0x11,0x11},
{'I',0x0e,0x04,0x04,0x04,0x04,0x04,0x0e},
{'J',0x07,0x02,0x02,0x02,0x02,0x12,0x0c},
{'K',0x11,0x12,0x14,0x18,0x14,0x12,0x11},
{'L',0x10,0x10,0x10,0x10,0x10,0x10,0x1f},
{'M',0x11,0x1b,0x15,0x15,0x11,0x11,0x11},
{'N',0x11,0x11,0x19,0x15,0x13,0x11,0x11},
{'0',0x0e,0x11,0x11,0x11,0x11,0x11,0x0e},
{'P',0x1e,0x11,0x11,0x1e,0x10,0x10,0x10},
{'Q',0x0e,0x11,0x11,0x11,0x15,0x12,0x0d},
{'R',0x0e,0x11,0x11,0x1e,0x14,0x12,0x11},
{'S',0x0f,0x10,0x10,0x0e,0x01,0x01,0x1e},
{'T',0x1f,0x04,0x04,0x04,0x04,0x04,0x04},
{'U',0x11,0x11,0x11,0x11,0x11,0x11,0x0e},
{'V',0x11,0x11,0x11,0x11,0x11,0x0a,0x04},
{'W',0x11,0x11,0x11,0x15,0x15,0x15,0x0a},
{'X',0x11,0x11,0x0a,0x04,0x0a,0x11,0x11},
{'Y',0x11,0x11,0x11,0x0a,0x04,0x04,0x04},
{'Z',0x1f,0x01,0x02,0x04,0x08,0x10,0x1f},
{'[',0x0e,0x08,0x08,0x08,0x08,0x08,0x0e},
{' ',0x11,0x0a,0x1f,0x04,0x1f,0x04,0x04},
{']',0x0e,0x02,0x02,0x02,0x02,0x02,0x0e},
{'^',0x04,0x0a,0x11,0x00,0x00,0x00,0x00},
{'_',0x00,0x00,0x00,0x00,0x00,0x00,0x1f},
{' ',0x04,0x02,0x01,0x00,0x00,0x00,0x00},
{'a',0x00,0x00,0x0e,0x01,0x0f,0x11,0x0f},
{'b',0x10,0x10,0x16,0x19,0x11,0x11,0x1e},
{'c',0x00,0x00,0x0e,0x10,0x10,0x11,0x0e},
{'d',0x01,0x01,0x0d,0x13,0x11,0x11,0x0f},
{'e',0x00,0x00,0x0e,0x11,0x1f,0x10,0x0e},
{'f',0x06,0x09,0x08,0x1c,0x08,0x08,0x08},
{'g',0x00,0x0f,0x11,0x11,0x0f,0x01,0x0e},
{'h',0x10,0x10,0x16,0x19,0x11,0x11,0x11},
{'i',0x04,0x00,0x0c,0x04,0x04,0x04,0x0e},
{'j',0x02,0x00,0x06,0x02,0x02,0x12,0x0c},
{'k',0x10,0x10,0x12,0x14,0x18,0x14,0x12},
{'l',0x0c,0x04,0x04,0x04,0x04,0x04,0x0e},
{'m',0x00,0x00,0x1a,0x15,0x15,0x11,0x11},
{'n',0x00,0x00,0x16,0x19,0x11,0x11,0x11},
{'o',0x00,0x00,0x0e,0x11,0x11,0x11,0x0e},
{'p',0x00,0x00,0x1e,0x11,0x1e,0x10,0x10},
{'q',0x00,0x00,0x0d,0x13,0x0f,0x01,0x01},
{'r',0x00,0x00,0x16,0x19,0x10,0x10,0x10},
{'s',0x00,0x00,0x0e,0x10,0x0e,0x01,0x1e},
{'t',0x08,0x08,0x1c,0x08,0x08,0x09,0x06},
{'u',0x00,0x00,0x11,0x11,0x11,0x13,0x0d},
{'v',0x00,0x00,0x11,0x11,0x11,0x0a,0x04},
{'w',0x00,0x00,0x11,0x11,0x15,0x15,0x0a},
{'x',0x00,0x00,0x11,0x0a,0x04,0x0a,0x11},
{'y',0x00,0x00,0x11,0x11,0x0f,0x01,0x0e},
{'z',0x00,0x00,0x1f,0x02,0x04,0x08,0x1f},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},
{' ',0x00,0x00,0x00,0x00,0x00,0x00,0x00},

};

static short sgWidth,sgHeight,sgRed,sgGreen,sgBlue,sgNlines,sgNchars,sgAspect,sgX,sgY,sgLineWidth,sgBarWidth;
static char *cPtr2LineBuffs[10];

int DrawLedChar(HDC hdc, short x, short y, short width, short height, char WhichChar,short red,short green, short blue)
{
  short i,j,xoffset,yoffset, xcurr,ycurr;
  HBRUSH hBrush;
  HPEN hPen;
  char currentBitCode;
  
  hBrush = CreateSolidBrush (RGB(0,0,0));
  hBrush = (HBRUSH)SelectObject(hdc,hBrush);
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(hdc,hPen);
         Rectangle(hdc,
           x,
           y,
           x+width,
           y+height
         );
  DeleteObject(SelectObject(hdc,hBrush)); 
  DeleteObject(SelectObject(hdc,hPen)); 
  xoffset = width/7;
  yoffset = height/9;
  xcurr = x;
  ycurr = y;
              
  for(i=0; i< 7; i++)
  {
    currentBitCode = LEDchars[WhichChar - 0x20].BitCode[i];
    ycurr += yoffset;
    xcurr = x;
    for(j=0; j<5; j++)
    { 
      if(currentBitCode & 0x10)
      {
         hBrush = CreateSolidBrush (RGB(red,green,blue));
         hBrush = (HBRUSH)SelectObject(hdc,hBrush);
         if(xoffset <= 3)
         {    
           hPen =CreatePen(PS_SOLID,1,RGB(red/1.7,green/1.7,blue/1.7));
           hPen = (HPEN)SelectObject(hdc,hPen);
         }
         
         if(xoffset > 3)
         {    
           hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
           hPen = (HPEN)SelectObject(hdc,hPen);
         }
         Rectangle(hdc,
                       xcurr,
                       ycurr,
                       xcurr+xoffset,
                       ycurr+yoffset
                     ); 
         DeleteObject(SelectObject(hdc,hBrush)); 
         DeleteObject(SelectObject(hdc,hPen)); 
      } 
      currentBitCode = currentBitCode << 1;
      xcurr += xoffset;
    }
  }                     
  return(0);
}

 
int DefineLedDisplay(HWND hwnd, short x, short y, LEDdisplay *whichDisplay)
{
  HDC mainHDC;
  HBRUSH hBrush;
  HPEN hPen;

  sgNlines = whichDisplay->nLines;
  sgNchars = whichDisplay->nCharsPerLine;
  sgAspect = whichDisplay->AspectRatio;
  sgRed = whichDisplay->Red;
  sgGreen = whichDisplay->Green;
  sgBlue = whichDisplay->Blue;
  sgWidth = whichDisplay->DisplayWidth / whichDisplay->nCharsPerLine ; 
  sgX = x;
  sgY = y;
  
  if(sgAspect == 1)
    sgHeight = (9 * sgWidth) / 7 ;
  else 
    sgHeight = whichDisplay->DisplayHeight / whichDisplay->nLines;
  mainHDC = GetDC(hwnd);
  hBrush = CreateSolidBrush (RGB(128,128,128));
  hBrush = (HBRUSH)SelectObject(mainHDC,hBrush);
      
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(mainHDC,hPen);
  Rectangle(mainHDC,
    x-.05*whichDisplay->DisplayWidth,
    y-.05*whichDisplay->DisplayWidth,
    x+whichDisplay->DisplayWidth+.05*whichDisplay->DisplayWidth,
    y+sgHeight*whichDisplay->nLines+.05*whichDisplay->DisplayWidth
  );
  DeleteObject(SelectObject(mainHDC,hBrush)); 
  DeleteObject(SelectObject(mainHDC,hPen));
   
  hBrush = CreateSolidBrush (RGB(0,0,0));
  hBrush = (HBRUSH)SelectObject(mainHDC,hBrush);
      
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(mainHDC,hPen);
  Rectangle(mainHDC,
    x,
    y,
    x+whichDisplay->DisplayWidth,
    y+sgHeight*whichDisplay->nLines
  );
  DeleteObject(SelectObject(mainHDC,hBrush)); 
  DeleteObject(SelectObject(mainHDC,hPen));  
  ReleaseDC(hwnd,mainHDC);  
  return(0);
}

int RefreshLedDisplay(HWND hwnd, LEDdisplay *whichDisplay)
{
  int i,j; 
  int lineOffset; 
  char *CharPtr;
  lineOffset = 0;
  HDC mainHDC;
  
  mainHDC = GetDC(hwnd);
  /* loop over all lines */
  for(i=0; i< sgNlines; i++)
  {
    CharPtr = whichDisplay->LineStrings[i];
    for(j=0; j < strlen(whichDisplay->LineStrings[i]); j++)
    {
      DrawLedChar( mainHDC, 
              sgX+(j)*sgWidth,
              sgY+lineOffset,  
              sgWidth,  
              sgHeight, 
              *(CharPtr++),
              sgRed,
              sgGreen,
              sgBlue
            );
    }

    for(j= strlen(whichDisplay->LineStrings[i]);j<sgNchars; j++)
    {
      DrawLedChar( mainHDC, 
              sgX+(j)*sgWidth,
              sgY+lineOffset,  
              sgWidth,  
              sgHeight, 
              0x20,
              sgRed,
              sgGreen,
              sgBlue
            );
    }
    lineOffset += sgHeight;
  }
  ReleaseDC(hwnd,mainHDC);
  return(0);
}

 void DrawRGB_BarGraph(	HWND hwnd, LEDdisplay *whichDisplay, double Red, double Green, double Blue, BarEncoding whichCode)
 {
	HDC mainHDC;
  HBRUSH hBrush;
  HPEN hPen;
  double dBlueScale, dGreenScale,dRedScale;

  sgNlines = whichDisplay->nLines;
  sgNchars = whichDisplay->nCharsPerLine;
  sgAspect = whichDisplay->AspectRatio;
  sgRed = whichDisplay->Red;
  sgGreen = whichDisplay->Green;
  sgBlue = whichDisplay->Blue;
  sgWidth = whichDisplay->DisplayWidth/whichDisplay->nCharsPerLine  ; 
  sgLineWidth = whichDisplay->DisplayWidth/51;
  sgBarWidth = whichDisplay->DisplayWidth;
   if(sgAspect == 1)
    sgHeight = (9 * sgWidth) / 7 ;
  else 
    sgHeight = whichDisplay->DisplayHeight / whichDisplay->nLines;

  // calculate scale factors

  dBlueScale = Blue/2.0;
  dRedScale = Red/2.0;
  dGreenScale = Green/2.0;


   mainHDC = GetDC(hwnd);
  
 
  hBrush = CreateSolidBrush (RGB(128,128,128));
  hBrush = (HBRUSH)SelectObject(mainHDC,hBrush);
      
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(mainHDC,hPen);
  Rectangle(mainHDC,
      0+.05*sgWidth,
	  sgHeight*2,
	  sgWidth*whichDisplay->nCharsPerLine -.05*sgWidth,
	  sgHeight*3
    
  );
  DeleteObject(SelectObject(mainHDC,hBrush)); 
  DeleteObject(SelectObject(mainHDC,hPen));
 
 
 
  
  hBrush = CreateSolidBrush (RGB(128,128,128));
  hBrush = (HBRUSH)SelectObject(mainHDC,hBrush);
      
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(mainHDC,hPen);
  Rectangle(mainHDC,
      0+.05*sgWidth,
	  sgHeight*3,
	  sgWidth*whichDisplay->nCharsPerLine -.05*sgWidth,
	  sgHeight*4
    
  );
  DeleteObject(SelectObject(mainHDC,hBrush)); 
  DeleteObject(SelectObject(mainHDC,hPen));

  
 
  
  hBrush = CreateSolidBrush (RGB(128,128,128));
  hBrush = (HBRUSH)SelectObject(mainHDC,hBrush);
      
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(mainHDC,hPen);
  Rectangle(mainHDC,
      0+.05*sgWidth,
	  sgHeight*4,
	  sgWidth*whichDisplay->nCharsPerLine -.05*sgWidth,
	  sgHeight*5
    
  );
  DeleteObject(SelectObject(mainHDC,hBrush)); 
  DeleteObject(SelectObject(mainHDC,hPen));

 

  // Draw White Marker
 
   hBrush = CreateSolidBrush (RGB(255,255,255));
  hBrush = (HBRUSH)SelectObject(mainHDC,hBrush);
      
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(mainHDC,hPen);
  Rectangle(mainHDC,
      sgWidth*whichDisplay->nCharsPerLine/2 +.05*sgWidth,
	  sgHeight*2-.15*sgHeight,
	  sgWidth*whichDisplay->nCharsPerLine/2 +.05*sgWidth+sgLineWidth,
	  sgHeight*5+.15*sgHeight
    
  );
 
  DeleteObject(SelectObject(mainHDC,hBrush)); 
  DeleteObject(SelectObject(mainHDC,hPen));
    // Draw Red Bar
 
   hBrush = CreateSolidBrush (RGB(255,0,0));
  hBrush = (HBRUSH)SelectObject(mainHDC,hBrush);
      
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(mainHDC,hPen);
  Ellipse(mainHDC,
      (dRedScale)*sgBarWidth,
	  sgHeight*2,
	  (dRedScale)*sgBarWidth+sgLineWidth,
	  sgHeight*3
    
  );
 DeleteObject(SelectObject(mainHDC,hBrush)); 
  DeleteObject(SelectObject(mainHDC,hPen));

   // Draw Green Bar
 
   hBrush = CreateSolidBrush (RGB(0,255,0));
  hBrush = (HBRUSH)SelectObject(mainHDC,hBrush);
      
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(mainHDC,hPen);
  Ellipse(mainHDC,
      (dGreenScale)*sgBarWidth,
	  sgHeight*3,
	  (dGreenScale)*sgBarWidth+sgLineWidth,
	  sgHeight*4
    
  );
 
  DeleteObject(SelectObject(mainHDC,hBrush)); 
  DeleteObject(SelectObject(mainHDC,hPen));
   // Draw Blue Bar
 
   hBrush = CreateSolidBrush (RGB(0,0,255));
  hBrush = (HBRUSH)SelectObject(mainHDC,hBrush);
      
  hPen =CreatePen(PS_SOLID,1,RGB(0,0,0));
  hPen = (HPEN)SelectObject(mainHDC,hPen);
  Ellipse(mainHDC,
      (dBlueScale)*sgBarWidth,
	  sgHeight*4,
	  (dBlueScale)*sgBarWidth+sgLineWidth,
	  sgHeight*5
    
  );
 
  DeleteObject(SelectObject(mainHDC,hBrush)); 
  DeleteObject(SelectObject(mainHDC,hPen));



  ReleaseDC(hwnd,mainHDC); 
 }