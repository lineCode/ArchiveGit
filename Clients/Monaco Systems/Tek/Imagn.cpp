// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "Imagen.h"

/////////////////////////////////////////////////////////////////////////////
// CImageN

IMPLEMENT_DYNCREATE(CImageN, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CImageN properties

BOOL CImageN::GetAutoClose()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetAutoClose(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

long CImageN::GetViewBufferId()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetViewBufferId(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

BOOL CImageN::GetScrollbars()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetScrollbars(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CImageN::GetViewProgressive()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetViewProgressive(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CImageN::GetAntiAlias()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetAntiAlias(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

long CImageN::GetAlignH()
{
	long result;
	GetProperty(0x6, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetAlignH(long propVal)
{
	SetProperty(0x6, VT_I4, propVal);
}

long CImageN::GetAlignV()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetAlignV(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

long CImageN::GetRotate()
{
	long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetRotate(long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

long CImageN::GetPageNbr()
{
	long result;
	GetProperty(0x9, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetPageNbr(long propVal)
{
	SetProperty(0x9, VT_I4, propVal);
}

long CImageN::GetViewScale()
{
	long result;
	GetProperty(0xa, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetViewScale(long propVal)
{
	SetProperty(0xa, VT_I4, propVal);
}

BOOL CImageN::GetAutoAssignBuf()
{
	BOOL result;
	GetProperty(0xb, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetAutoAssignBuf(BOOL propVal)
{
	SetProperty(0xb, VT_BOOL, propVal);
}

BOOL CImageN::GetMirror()
{
	BOOL result;
	GetProperty(0xc, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetMirror(BOOL propVal)
{
	SetProperty(0xc, VT_BOOL, propVal);
}

BOOL CImageN::GetInvert()
{
	BOOL result;
	GetProperty(0xd, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetInvert(BOOL propVal)
{
	SetProperty(0xd, VT_BOOL, propVal);
}

long CImageN::GetDither()
{
	long result;
	GetProperty(0xe, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetDither(long propVal)
{
	SetProperty(0xe, VT_I4, propVal);
}

long CImageN::GetRetCode()
{
	long result;
	GetProperty(0xf, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetRetCode(long propVal)
{
	SetProperty(0xf, VT_I4, propVal);
}

long CImageN::GetStatus()
{
	long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetStatus(long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

CString CImageN::GetFilename()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}

void CImageN::SetFilename(LPCTSTR propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}

long CImageN::GetPages()
{
	long result;
	GetProperty(0x12, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetPages(long propVal)
{
	SetProperty(0x12, VT_I4, propVal);
}

long CImageN::GetAspectX()
{
	long result;
	GetProperty(0x13, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetAspectX(long propVal)
{
	SetProperty(0x13, VT_I4, propVal);
}

long CImageN::GetAspectY()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetAspectY(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

long CImageN::GetColors()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetColors(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

long CImageN::GetSizeX()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetSizeX(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

long CImageN::GetSizeY()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetSizeY(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

long CImageN::GetLogWidth()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetLogWidth(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

long CImageN::GetLogHeight()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetLogHeight(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

long CImageN::GetViewPosX()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetViewPosX(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

long CImageN::GetViewPosY()
{
	long result;
	GetProperty(0x1b, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetViewPosY(long propVal)
{
	SetProperty(0x1b, VT_I4, propVal);
}

BOOL CImageN::GetSuspendKey()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetSuspendKey(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

BOOL CImageN::GetSuspendMouseButton()
{
	BOOL result;
	GetProperty(0x1d, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetSuspendMouseButton(BOOL propVal)
{
	SetProperty(0x1d, VT_BOOL, propVal);
}

BOOL CImageN::GetSuspendMouseMove()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetSuspendMouseMove(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}

BOOL CImageN::GetSuspendTimer()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetSuspendTimer(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}

BOOL CImageN::GetSuspendPostMessage()
{
	BOOL result;
	GetProperty(0x20, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetSuspendPostMessage(BOOL propVal)
{
	SetProperty(0x20, VT_BOOL, propVal);
}

BOOL CImageN::GetSuspendSendMessage()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetSuspendSendMessage(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

BOOL CImageN::GetSuspendPaint()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetSuspendPaint(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

long CImageN::GetHPal()
{
	long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetHPal(long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}

BOOL CImageN::GetForcePalette()
{
	BOOL result;
	GetProperty(0x4b, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetForcePalette(BOOL propVal)
{
	SetProperty(0x4b, VT_BOOL, propVal);
}

long CImageN::GetTool()
{
	long result;
	GetProperty(0x4c, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetTool(long propVal)
{
	SetProperty(0x4c, VT_I4, propVal);
}

long CImageN::GetToolShift()
{
	long result;
	GetProperty(0x4d, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetToolShift(long propVal)
{
	SetProperty(0x4d, VT_I4, propVal);
}

long CImageN::GetToolControl()
{
	long result;
	GetProperty(0x4e, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetToolControl(long propVal)
{
	SetProperty(0x4e, VT_I4, propVal);
}

long CImageN::GetToolControlShift()
{
	long result;
	GetProperty(0x4f, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetToolControlShift(long propVal)
{
	SetProperty(0x4f, VT_I4, propVal);
}

BOOL CImageN::GetPopupMenu()
{
	BOOL result;
	GetProperty(0x50, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetPopupMenu(BOOL propVal)
{
	SetProperty(0x50, VT_BOOL, propVal);
}

BOOL CImageN::GetAutoResize()
{
	BOOL result;
	GetProperty(0x51, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetAutoResize(BOOL propVal)
{
	SetProperty(0x51, VT_BOOL, propVal);
}

long CImageN::GetMaxWidth()
{
	long result;
	GetProperty(0x52, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetMaxWidth(long propVal)
{
	SetProperty(0x52, VT_I4, propVal);
}

long CImageN::GetMaxHeight()
{
	long result;
	GetProperty(0x53, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetMaxHeight(long propVal)
{
	SetProperty(0x53, VT_I4, propVal);
}

long CImageN::GetImageType()
{
	long result;
	GetProperty(0x54, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetImageType(long propVal)
{
	SetProperty(0x54, VT_I4, propVal);
}

CString CImageN::GetImageTypeStr()
{
	CString result;
	GetProperty(0x55, VT_BSTR, (void*)&result);
	return result;
}

void CImageN::SetImageTypeStr(LPCTSTR propVal)
{
	SetProperty(0x55, VT_BSTR, propVal);
}

long CImageN::GetImageCompr()
{
	long result;
	GetProperty(0x56, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetImageCompr(long propVal)
{
	SetProperty(0x56, VT_I4, propVal);
}

CString CImageN::GetImageComprStr()
{
	CString result;
	GetProperty(0x57, VT_BSTR, (void*)&result);
	return result;
}

void CImageN::SetImageComprStr(LPCTSTR propVal)
{
	SetProperty(0x57, VT_BSTR, propVal);
}

BOOL CImageN::GetShowErrors()
{
	BOOL result;
	GetProperty(0x58, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetShowErrors(BOOL propVal)
{
	SetProperty(0x58, VT_BOOL, propVal);
}

long CImageN::GetBitsPerPixel()
{
	long result;
	GetProperty(0x59, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetBitsPerPixel(long propVal)
{
	SetProperty(0x59, VT_I4, propVal);
}

CString CImageN::GetErrMsg()
{
	CString result;
	GetProperty(0x5a, VT_BSTR, (void*)&result);
	return result;
}

void CImageN::SetErrMsg(LPCTSTR propVal)
{
	SetProperty(0x5a, VT_BSTR, propVal);
}

long CImageN::GetTimer()
{
	long result;
	GetProperty(0x63, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetTimer(long propVal)
{
	SetProperty(0x63, VT_I4, propVal);
}

CString CImageN::GetLicense()
{
	CString result;
	GetProperty(0x64, VT_BSTR, (void*)&result);
	return result;
}

void CImageN::SetLicense(LPCTSTR propVal)
{
	SetProperty(0x64, VT_BSTR, propVal);
}

CString CImageN::GetComment()
{
	CString result;
	GetProperty(0x6e, VT_BSTR, (void*)&result);
	return result;
}

void CImageN::SetComment(LPCTSTR propVal)
{
	SetProperty(0x6e, VT_BSTR, propVal);
}

LPFONTDISP CImageN::GetFont()
{
	LPFONTDISP result;
	GetProperty(DISPID_FONT, VT_DISPATCH, (void*)&result);
	return result;
}

void CImageN::SetFont(LPFONTDISP propVal)
{
	SetProperty(DISPID_FONT, VT_DISPATCH, propVal);
}

OLE_COLOR CImageN::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CImageN::GetBorderStyle()
{
	short result;
	GetProperty(DISPID_BORDERSTYLE, VT_I2, (void*)&result);
	return result;
}

void CImageN::SetBorderStyle(short propVal)
{
	SetProperty(DISPID_BORDERSTYLE, VT_I2, propVal);
}

BOOL CImageN::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CImageN::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

OLE_HANDLE CImageN::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CImageN::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CImageN operations

void CImageN::RT(long RT1, long RT2, long RT3)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 RT1, RT2, RT3);
}

long CImageN::GetHeight(long BufferId, long Width)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Width);
	return result;
}

long CImageN::GetWidth(long BufferId, long Height)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Height);
	return result;
}

long CImageN::DefineImage(long BufferId, LPCTSTR Filename)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Filename);
	return result;
}

long CImageN::Open(long BufferId, LPCTSTR Filename)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Filename);
	return result;
}

long CImageN::Load(long BufferId, LPCTSTR Filename)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Filename);
	return result;
}

long CImageN::OpenEx(long BufferId, LPCTSTR Filename, long Offset, long Len, long Pageno)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Filename, Offset, Len, Pageno);
	return result;
}

long CImageN::LoadEx(long BufferId, LPCTSTR Filename, long Offest, long Len, long Pageno)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Filename, Offest, Len, Pageno);
	return result;
}

long CImageN::DefineImageEx(long BufferId, LPCTSTR Filename, long Offset, long Len, long Pageno)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Filename, Offset, Len, Pageno);
	return result;
}

void CImageN::SetCBLength(long Length)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Length);
}

long CImageN::DefineImageCB(long BufferId, long Instance)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Instance);
	return result;
}

long CImageN::WriteCBData(VARIANT* Data)
{
	long result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Data);
	return result;
}

long CImageN::PaintDC(long hDC, long BufId, LPUNKNOWN View, LPUNKNOWN LogSize, LPUNKNOWN Paint, long Options)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_UNKNOWN VTS_UNKNOWN VTS_UNKNOWN VTS_I4;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC, BufId, View, LogSize, Paint, Options);
	return result;
}

long CImageN::LoadData(long BufId, long DataLen, LPUNKNOWN Data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_UNKNOWN;
	InvokeHelper(0x31, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, DataLen, Data);
	return result;
}

long CImageN::OpenData(long BufId, long DataLen, LPUNKNOWN Data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_UNKNOWN;
	InvokeHelper(0x32, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, DataLen, Data);
	return result;
}

long CImageN::DefineImageData(long BufId, long DataLen, LPUNKNOWN Data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_UNKNOWN;
	InvokeHelper(0x33, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, DataLen, Data);
	return result;
}

long CImageN::LoadDataEx(long BufId, long DataLen, LPUNKNOWN Data, long Offset, long Len, long Pageno)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_UNKNOWN VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x34, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, DataLen, Data, Offset, Len, Pageno);
	return result;
}

long CImageN::OpenDataEx(long BufId, long DataLen, LPUNKNOWN Data, long Offset, long Len, long Pageno)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_UNKNOWN VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x35, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, DataLen, Data, Offset, Len, Pageno);
	return result;
}

long CImageN::DefineImageDataEx(long BufId, long DataLen, LPUNKNOWN Data, long Offset, long Len, long Pageno)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_UNKNOWN VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x36, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, DataLen, Data, Offset, Len, Pageno);
	return result;
}

long CImageN::LoadVar(long BufId, long VarLen, VARIANT* Data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x37, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, VarLen, Data);
	return result;
}

long CImageN::OpenVar(long BufId, long VarLen, VARIANT* Data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x38, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, VarLen, Data);
	return result;
}

long CImageN::DefineImageVar(long BufId, long VarLen, VARIANT* Data)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x39, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, VarLen, Data);
	return result;
}

long CImageN::SetViewPos(long PositionX, long PositionY)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		PositionX, PositionY);
	return result;
}

long CImageN::InvPal(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::SetPalWindow(long hWnd, long hPalWnd)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x3c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hWnd, hPalWnd);
	return result;
}

long CImageN::SelPalA(long hWnd, LPCTSTR PalList)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x3d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hWnd, PalList);
	return result;
}

long CImageN::SelPal(long hWnd, VARIANT* PalList)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_PVARIANT;
	InvokeHelper(0x3e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hWnd, PalList);
	return result;
}

long CImageN::GetRetCode(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x3f, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::BufStatus(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x40, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::PixelToViewX(long OffsetX)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x41, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		OffsetX);
	return result;
}

long CImageN::PixelToViewY(long OffsetY)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x42, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		OffsetY);
	return result;
}

long CImageN::ViewToPixelX(long OffsetX)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x43, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		OffsetX);
	return result;
}

long CImageN::ViewToPixelY(long OffsetY)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		OffsetY);
	return result;
}

long CImageN::GetPalette(VARIANT* Dest)
{
	long result;
	static BYTE parms[] =
		VTS_PVARIANT;
	InvokeHelper(0x45, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Dest);
	return result;
}

long CImageN::WriteCBDataEx(VARIANT* Data, long Length)
{
	long result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I4;
	InvokeHelper(0x46, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Data, Length);
	return result;
}

long CImageN::Resume(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::PaintDCA(long hDC, long BufId, LPCTSTR View, LPCTSTR LogSize, LPCTSTR Paint, long Options)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC, BufId, View, LogSize, Paint, Options);
	return result;
}

long CImageN::PaintDCStr(long hDC, long BufId, LPCTSTR View, long Options)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_I4;
	InvokeHelper(0x49, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC, BufId, View, Options);
	return result;
}

long CImageN::WriteCBDataBStr(LPCTSTR Data)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x4a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Data);
	return result;
}

CString CImageN::GetErrMsg(long BufferId)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::BeginReport(LPCTSTR Module)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Module);
	return result;
}

long CImageN::EndReport()
{
	long result;
	InvokeHelper(0x5d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageN::GetImageType(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5e, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

CString CImageN::GetImageTypeStr(long BufferId)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::GetImageCompr(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x60, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

CString CImageN::GetImageComprStr(long BufferId)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x61, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::GetBitsPerPixel(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x62, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

void CImageN::UL(long UL1, long UL2, long UL3, long UL4)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 UL1, UL2, UL3, UL4);
}

long CImageN::ShowImageInfo(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::CopyBufToClip(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x67, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::CopyBufToClipEx(long BufferId, LPUNKNOWN Clip)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_UNKNOWN;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Clip);
	return result;
}

long CImageN::CopyBufToClipExA(long BufferId, LPCTSTR Clip)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR;
	InvokeHelper(0x69, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, Clip);
	return result;
}

long CImageN::SetWindowPal(long hWnd, long hPal)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x6a, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hWnd, hPal);
	return result;
}

long CImageN::InvalidateView()
{
	long result;
	InvokeHelper(0x6b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageN::InvalidateBuf(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::GetBufHand(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

CString CImageN::GetComment(long BufId)
{
	CString result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		BufId);
	return result;
}

long CImageN::CreateDIB(long BufferId)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x70, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId);
	return result;
}

long CImageN::CreateDIBEx(long BufferId, long SizeX, long SizeY, LPUNKNOWN Clip, long BitsPerPixel, long hPal, long Options)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_UNKNOWN VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x71, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, SizeX, SizeY, Clip, BitsPerPixel, hPal, Options);
	return result;
}

long CImageN::CreateDIBExA(long BufferId, long SizeX, long SizeY, LPCTSTR Clip, long BitsPerPixel, long hPal, long Options)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x72, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufferId, SizeX, SizeY, Clip, BitsPerPixel, hPal, Options);
	return result;
}

long CImageN::WriteCBDataBStrEx(LPCTSTR Data, long Length)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x73, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Data, Length);
	return result;
}

long CImageN::GetCBInstance()
{
	long result;
	InvokeHelper(0x74, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageN::GetCBLength()
{
	long result;
	InvokeHelper(0x75, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageN::GetCBOffset()
{
	long result;
	InvokeHelper(0x76, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageN::GetImagNInstance()
{
	long result;
	InvokeHelper(0x77, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageN::PaintDCClip(long hDC, long BufId, LPUNKNOWN View, LPUNKNOWN LogSize, LPUNKNOWN Paint, long Options, LPUNKNOWN Clip)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_UNKNOWN VTS_UNKNOWN VTS_UNKNOWN VTS_I4 VTS_UNKNOWN;
	InvokeHelper(0x78, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC, BufId, View, LogSize, Paint, Options, Clip);
	return result;
}

long CImageN::PaintDCClipA(long hDC, long BufId, LPCTSTR View, LPCTSTR LogSize, LPCTSTR Paint, long Options, LPCTSTR Clip)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4 VTS_BSTR VTS_BSTR VTS_BSTR VTS_I4 VTS_BSTR;
	InvokeHelper(0x79, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		hDC, BufId, View, LogSize, Paint, Options, Clip);
	return result;
}

long CImageN::GetPaintOptions()
{
	long result;
	InvokeHelper(0x7a, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CImageN::WriteBMP(long BufId, LPCTSTR Filename, long Compression, BOOL Reserved)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_BOOL;
	InvokeHelper(0x7b, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, Filename, Compression, Reserved);
	return result;
}

long CImageN::WriteBMPEx(long BufId, LPCTSTR Filename, long Compression, long SizeX, long SizeY, LPUNKNOWN Clip, long BitsPerPixel, long hPal, long Options)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_UNKNOWN VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x7c, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, Filename, Compression, SizeX, SizeY, Clip, BitsPerPixel, hPal, Options);
	return result;
}

long CImageN::WriteBMPExA(long BufId, LPCTSTR Filename, long Compression, long SizeX, long SizeY, LPCTSTR Clip, long BitsPerPixel, long hPal, long Options)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x7d, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		BufId, Filename, Compression, SizeX, SizeY, Clip, BitsPerPixel, hPal, Options);
	return result;
}

void CImageN::DoClick()
{
	InvokeHelper(DISPID_DOCLICK, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CImageN::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CImageN::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
