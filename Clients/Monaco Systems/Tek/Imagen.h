#if !defined(AFX_IMAGEN_H__1CD071E1_3973_11D1_BAE5_200604C10000__INCLUDED_)
#define AFX_IMAGEN_H__1CD071E1_3973_11D1_BAE5_200604C10000__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CImageN wrapper class

class CImageN : public CWnd
{
protected:
	DECLARE_DYNCREATE(CImageN)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x5da9d7e0, 0x5a57, 0x11cf, { 0x9e, 0x36, 0x0, 0xc0, 0x93, 0x1, 0x98, 0xc0 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	BOOL GetAutoClose();
	void SetAutoClose(BOOL);
	long GetViewBufferId();
	void SetViewBufferId(long);
	BOOL GetScrollbars();
	void SetScrollbars(BOOL);
	BOOL GetViewProgressive();
	void SetViewProgressive(BOOL);
	BOOL GetAntiAlias();
	void SetAntiAlias(BOOL);
	long GetAlignH();
	void SetAlignH(long);
	long GetAlignV();
	void SetAlignV(long);
	long GetRotate();
	void SetRotate(long);
	long GetPageNbr();
	void SetPageNbr(long);
	long GetViewScale();
	void SetViewScale(long);
	BOOL GetAutoAssignBuf();
	void SetAutoAssignBuf(BOOL);
	BOOL GetMirror();
	void SetMirror(BOOL);
	BOOL GetInvert();
	void SetInvert(BOOL);
	long GetDither();
	void SetDither(long);
	long GetRetCode();
	void SetRetCode(long);
	long GetStatus();
	void SetStatus(long);
	CString GetFilename();
	void SetFilename(LPCTSTR);
	long GetPages();
	void SetPages(long);
	long GetAspectX();
	void SetAspectX(long);
	long GetAspectY();
	void SetAspectY(long);
	long GetColors();
	void SetColors(long);
	long GetSizeX();
	void SetSizeX(long);
	long GetSizeY();
	void SetSizeY(long);
	long GetLogWidth();
	void SetLogWidth(long);
	long GetLogHeight();
	void SetLogHeight(long);
	long GetViewPosX();
	void SetViewPosX(long);
	long GetViewPosY();
	void SetViewPosY(long);
	BOOL GetSuspendKey();
	void SetSuspendKey(BOOL);
	BOOL GetSuspendMouseButton();
	void SetSuspendMouseButton(BOOL);
	BOOL GetSuspendMouseMove();
	void SetSuspendMouseMove(BOOL);
	BOOL GetSuspendTimer();
	void SetSuspendTimer(BOOL);
	BOOL GetSuspendPostMessage();
	void SetSuspendPostMessage(BOOL);
	BOOL GetSuspendSendMessage();
	void SetSuspendSendMessage(BOOL);
	BOOL GetSuspendPaint();
	void SetSuspendPaint(BOOL);
	long GetHPal();
	void SetHPal(long);
	BOOL GetForcePalette();
	void SetForcePalette(BOOL);
	long GetTool();
	void SetTool(long);
	long GetToolShift();
	void SetToolShift(long);
	long GetToolControl();
	void SetToolControl(long);
	long GetToolControlShift();
	void SetToolControlShift(long);
	BOOL GetPopupMenu();
	void SetPopupMenu(BOOL);
	BOOL GetAutoResize();
	void SetAutoResize(BOOL);
	long GetMaxWidth();
	void SetMaxWidth(long);
	long GetMaxHeight();
	void SetMaxHeight(long);
	long GetImageType();
	void SetImageType(long);
	CString GetImageTypeStr();
	void SetImageTypeStr(LPCTSTR);
	long GetImageCompr();
	void SetImageCompr(long);
	CString GetImageComprStr();
	void SetImageComprStr(LPCTSTR);
	BOOL GetShowErrors();
	void SetShowErrors(BOOL);
	long GetBitsPerPixel();
	void SetBitsPerPixel(long);
	CString GetErrMsg();
	void SetErrMsg(LPCTSTR);
	long GetTimer();
	void SetTimer(long);
	CString GetLicense();
	void SetLicense(LPCTSTR);
	CString GetComment();
	void SetComment(LPCTSTR);
	LPFONTDISP GetFont();
	void SetFont(LPFONTDISP);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	short GetBorderStyle();
	void SetBorderStyle(short);
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);

// Operations
public:
	void RT(long RT1, long RT2, long RT3);
	long GetHeight(long BufferId, long Width);
	long GetWidth(long BufferId, long Height);
	long DefineImage(long BufferId, LPCTSTR Filename);
	long Open(long BufferId, LPCTSTR Filename);
	long Load(long BufferId, LPCTSTR Filename);
	long OpenEx(long BufferId, LPCTSTR Filename, long Offset, long Len, long Pageno);
	long LoadEx(long BufferId, LPCTSTR Filename, long Offest, long Len, long Pageno);
	long DefineImageEx(long BufferId, LPCTSTR Filename, long Offset, long Len, long Pageno);
	void SetCBLength(long Length);
	long DefineImageCB(long BufferId, long Instance);
	long WriteCBData(VARIANT* Data);
	long PaintDC(long hDC, long BufId, LPUNKNOWN View, LPUNKNOWN LogSize, LPUNKNOWN Paint, long Options);
	long LoadData(long BufId, long DataLen, LPUNKNOWN Data);
	long OpenData(long BufId, long DataLen, LPUNKNOWN Data);
	long DefineImageData(long BufId, long DataLen, LPUNKNOWN Data);
	long LoadDataEx(long BufId, long DataLen, LPUNKNOWN Data, long Offset, long Len, long Pageno);
	long OpenDataEx(long BufId, long DataLen, LPUNKNOWN Data, long Offset, long Len, long Pageno);
	long DefineImageDataEx(long BufId, long DataLen, LPUNKNOWN Data, long Offset, long Len, long Pageno);
	long LoadVar(long BufId, long VarLen, VARIANT* Data);
	long OpenVar(long BufId, long VarLen, VARIANT* Data);
	long DefineImageVar(long BufId, long VarLen, VARIANT* Data);
	long SetViewPos(long PositionX, long PositionY);
	long InvPal(long BufferId);
	long SetPalWindow(long hWnd, long hPalWnd);
	long SelPalA(long hWnd, LPCTSTR PalList);
	long SelPal(long hWnd, VARIANT* PalList);
	long GetRetCode(long BufferId);
	long BufStatus(long BufferId);
	long PixelToViewX(long OffsetX);
	long PixelToViewY(long OffsetY);
	long ViewToPixelX(long OffsetX);
	long ViewToPixelY(long OffsetY);
	long GetPalette(VARIANT* Dest);
	long WriteCBDataEx(VARIANT* Data, long Length);
	long Resume(long BufferId);
	long PaintDCA(long hDC, long BufId, LPCTSTR View, LPCTSTR LogSize, LPCTSTR Paint, long Options);
	long PaintDCStr(long hDC, long BufId, LPCTSTR View, long Options);
	long WriteCBDataBStr(LPCTSTR Data);
	CString GetErrMsg(long BufferId);
	long BeginReport(LPCTSTR Module);
	long EndReport();
	long GetImageType(long BufferId);
	CString GetImageTypeStr(long BufferId);
	long GetImageCompr(long BufferId);
	CString GetImageComprStr(long BufferId);
	long GetBitsPerPixel(long BufferId);
	void UL(long UL1, long UL2, long UL3, long UL4);
	long ShowImageInfo(long BufferId);
	long CopyBufToClip(long BufferId);
	long CopyBufToClipEx(long BufferId, LPUNKNOWN Clip);
	long CopyBufToClipExA(long BufferId, LPCTSTR Clip);
	long SetWindowPal(long hWnd, long hPal);
	long InvalidateView();
	long InvalidateBuf(long BufferId);
	long GetBufHand(long BufferId);
	CString GetComment(long BufId);
	long CreateDIB(long BufferId);
	long CreateDIBEx(long BufferId, long SizeX, long SizeY, LPUNKNOWN Clip, long BitsPerPixel, long hPal, long Options);
	long CreateDIBExA(long BufferId, long SizeX, long SizeY, LPCTSTR Clip, long BitsPerPixel, long hPal, long Options);
	long WriteCBDataBStrEx(LPCTSTR Data, long Length);
	long GetCBInstance();
	long GetCBLength();
	long GetCBOffset();
	long GetImagNInstance();
	long PaintDCClip(long hDC, long BufId, LPUNKNOWN View, LPUNKNOWN LogSize, LPUNKNOWN Paint, long Options, LPUNKNOWN Clip);
	long PaintDCClipA(long hDC, long BufId, LPCTSTR View, LPCTSTR LogSize, LPCTSTR Paint, long Options, LPCTSTR Clip);
	long GetPaintOptions();
	long WriteBMP(long BufId, LPCTSTR Filename, long Compression, BOOL Reserved);
	long WriteBMPEx(long BufId, LPCTSTR Filename, long Compression, long SizeX, long SizeY, LPUNKNOWN Clip, long BitsPerPixel, long hPal, long Options);
	long WriteBMPExA(long BufId, LPCTSTR Filename, long Compression, long SizeX, long SizeY, LPCTSTR Clip, long BitsPerPixel, long hPal, long Options);
	void DoClick();
	void Refresh();
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Developer Studio will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_IMAGEN_H__1CD071E1_3973_11D1_BAE5_200604C10000__INCLUDED_)
