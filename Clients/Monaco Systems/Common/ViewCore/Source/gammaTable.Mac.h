//	File "gammaTable.h"  - Header for the GammaTable C++ class.//	The GammaTables class allows altering the gamma tables of GDevices.//	It encapsulates functions to alter gamma tables and variables for saving//		state information into a single object.////	Written by Jeff Yuan  03/19/96////	The source code is adapted from the GammaFade library written by //		Matt Slot (fprefect@umich.edu) and Matt Mora (mxmora@apple.com).#ifndef GAMMA_TABLE#define GAMMA_TABLE#include "colorconvert.h"//  Define error type#define GAMMA_TABLE_NOT_SUPPORTED 	(-1)//	To help check for compatibility#define kGetDeviceListTrapNum		0xAA29/*// define a new type for holding any RGB number triplettypedef struct {	double red;	double green;	double blue;} RGBNumber, *RGBNumberPtr, **RGBNumberHdl;*/// The GammaTable class is meant to make modifying gamma tables very easy.// Three functions //		Boolean isGammaAvailable(GDHandle), //		OSErr getDevGammaTable(GDHandle, GammaTblPtr *) and// 	OSErr setDevGammaTable(GDHandle, GammaTblPtr *)  are the necessary//		functions for modifying gamma tables.  They are static so no object//		instatiation is required to use them.  The instatiated object just makes //		creating, tracking and restoring gamma tables really simple.// The GammaTable class contains several variables for tracking the original// 	and current gamma tables (stored in the system GammaTbl structure).//	These two tables can have different sizes (e.g. different number of channels //		and formulas).class GammaTable {	protected:	// Variables.				short originalSize; 						// Size of the original GammaTbl structure.		short hackedSize; 						// Size of the new/modified GammaTbl structure.		GammaTblHandle originalTable; 	// Handle to the original GammaTbl structure.															// When the object is initialized, a copy of															// the current gamma table in use is saved here.																	GammaTblHandle hackedTable; 	// Handle to the new/changed Gammatbl structure.															// This may or may not contain a copy of the															// current gamma table in use.  Use saveCurrentTable()															// to store a copy of the current table here.		GDHandle theGDevice; 					// Handle to the GDevice this object is attached to.			// Functions.		public:		static Boolean isMillionAvailable(GDHandle theGDevice);				// This function determines if theGDevice supports gamma tables.        //	Returns TRUE if it does and FALSE if otherwise.        // ¥ Note: use this function to see if you can alter gamma tables		// 	before any object instantiation. 		static Boolean isGammaAvailable(GDHandle theGDevice);				// Sets the gamma table for device theGDevice to theTable.		static OSErr getDevGammaTable(GDHandle theGDevice, GammaTblPtr *theTable);		// Seturns the currently used gamma table in theTable.		static OSErr setDevGammaTable(GDHandle theGDevice, GammaTblPtr *theTable);		// You know what these are.		// If you instantiate the object using the parametless constructor or using		// no constructor at all (creating handles) you need to manually initialize 		// the object by calling initialize(GDevice).		GammaTable(); 		GammaTable(GDHandle theGDevice) ;		~GammaTable(); 				// Initialize variables and attach object to a particular GDevice.		OSErr initialize(GDHandle theGDevice);		// Check to see if the object is linked to a particular device.		Boolean isForDevice(GDHandle theGDevice);		// Get the handle to the GDevice.		GDHandle getGDevice();		// Set the handle to the hacked table.		setHackedTable(GammaTblHandle theHackedTableHdl);				// Get the handle to the hacked table.		GammaTblHandle getHackedTable();		// Set the size of the hacked table.		setHackedSize(short size);		// Get the size of the hacked table.		short getHackedSize();				// Save a copy of the current gamma table.		// When this is called the first time it saves to the originalTable		// (this is done in initialize(.) ).		// In subsequent calls it saves to the hackedTable.		// So for all practical intents and purposes, the result will be in hackedTable.		OSErr saveCurrentTable();		// Restores original gamma table saved in originalTable.		OSErr restoreOriginalTable();				// Dispose storage used by saved data.		// If using using movable objects - i.e. creating handles to the GammaTable		// object - you must call this function manually before disposing the		// handle.  However, it doesn't hurt to call it anyway.		OSErr cleanup();				// Create a gamma table and make it the current device gamma table.		// ratio is the ratio  of the intensity of the R, G and B channels.		// 	This triplet is used to balance the three guns if they are really		//		off.  E.g. if the R gun is 2x too strong, you specify (0.5, 1.0, 1.0).		//		these numbers have will be normalized so that only the ratios will be		// 	significant.		// target gamma is the desired nonlinearity of the monitor+gamma correction table.		// monitor gamma is the nonlinearity of the monitor itself.		// correction (e) is the desired nonlinearity in the gamma table. 		// 	Since the monitor itself has a nonlinear function relating voltage		// 	(v) to intensity (i) with an exponent of about 2.5: i Å v^2.5, the 		//		function relating RGB code (c) to voltage must be: v Å c^(gamma/2.5) = c^e.  		// 	For all intents and purposes this function is the gamma table.  		// 	The default QuickDraw gamma table has an eÅ1/1.4 Å 0.7, 		// 	which makes gammaÅ1.8.		//	 chanCount is number of channels in the table.  If you want one table for		// 	all three primaries, specify 1.  If you want separate tables for each		// 	primary, specify 3.		OSErr createGammaTable(RGBNumber ratio, RGBNumber targetGamma, 			RGBNumber monitorGamma, short chanCount);}; 	// ¥>note: 	you can create handle to the object only if you don't define//					any virtual functions - there's no way to initialize the// 				virtual function tables if you do and the program will crash.typedef GammaTable*  GammaTablePtr;typedef GammaTablePtr* GammaTableHdl;#endif // #ifndef GAMMA_TABLE