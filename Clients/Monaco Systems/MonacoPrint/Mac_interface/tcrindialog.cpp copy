////////////////////////////////////////////////////////////////////////////////////////////////
//	The new input dialog																	  //
//  inputdialog2.c																			  //
//  James Vogh																				  //
////////////////////////////////////////////////////////////////////////////////////////////////



#include "tcrindialog.h"
#include "monacoprint.h"
#include "think_bugs.h"
#include "fullname.h"
#include "mcofile.h"
#include "pascal_string.h"
#include "colortran.h"
#include "techkon.h"
#include "tcr.h"
//#include "globalValues.h"
#include "recipes.h"
#include "scram_array.h"
#include "pascal_string.h"
#include "mcocolsyn.h"
#include "errordial.h"
#include "positiondial.h"
#include <math.h>


#define RGB_PATCHES_8_11 "\pMcoPatchesRGB8-11"
#define RGB_PATCHES_11_17 "\pMcoPatchesRGB11-17"
#define RGB_PATCHES_RGB "\pMcoPatchesRGB8-11-RGB"

#define OK	1
#define Cancel 3

#define Input_Dialog		(2013)
#define Ok_Box				(2)
#define Save_as				(4)
#define Strip_Rect			(5)
#define Message				(8)
#define Cur_sheet			(6)
#define Cur_strip			(7)
#define Patch_Rect			(10)
#define New_Patch_Rect		(15)
#define	Slider				(16)
#define Redo				(-1)
#define Start				(17)
#define VoiceSet			(-1)
#define ThreeDBox			(19)
#define	UpdateEvent			(400)
#define	TimeEvent			(401)
#define Message_List_ID		(1001)

#define Position_Up			(21)
#define Position_Down		(22)
#define Position_Left		(23)
#define Position_Right		(24)


#define VoiceNums {101,102,-1,-1,-1,-1}
#define ClickNum 			(50)
#define EndColumnNum		(51)

#define Button_Labels (17010)

#define NUM_ROWS_CMYK 32

TCRInDialog::TCRInDialog(ProfileDoc *dc,RawData *pD)
{
	short		iType;
	Handle		iHandle;
	Handle		sHandle;
	Rect 		iRect, r,pRect,tRect;	
	UserItemUPP  box3D;
	
	QDErr		error;
	GDHandle	oldGD;
	GWorldPtr	oldGW;
	RGBColor	c,oldbackcolor,oldforecolor;
	WindowPtr	oldP;
	OSErr			err;
	int32 wi,hi;
	double w,h;
	McoColorSync *mon,*lab,*list[2];
	
	patchD = pD;
	
	if (pD == NULL) return;
	
	doc = dc;
	
	//Scramble = !(isPressed(0x3a));
	Scramble = FALSE;
	

	
	_rgbpatchH = NULL;
	_labpatchrefH = NULL;

	WinType = StripDialog;
	WinNum = 0;

	setDialog(Input_Dialog);
	frame_button(Ok_Box);	

	chan = nil;
	
	err = SndNewChannel (&chan, 0, 0, nil);
	if (err != noErr) chan = nil;
	if (Scramble)
		{
		voice_set = 1;
		}	
	else
		{
		Disable(dp,VoiceSet);
		voice_set = 2;
		}
	//playSound(8193);
	

	patchtype = patchD->type;
	patch_per_strip = patchD->patches.rows;
	strip_per_sheet = 10000000;
	if (patchD->format.numLinear > 0) data_patches = patchD->format.total;
	else data_patches = patchD->format.total+patchD->format.numc*(patchD->format.numLinear-1);

	if (data_patches % (patch_per_strip) == 0)
		total_patches = ((data_patches/(patch_per_strip)))*patch_per_strip;
	else total_patches = ((data_patches/(patch_per_strip))+1)*patch_per_strip;

	patch_data = new double[total_patches*3];

	
	//patch_data = (double*)McoLockHandle(patchH);
	
	num_used_patches  = data_patches;
	
	top_patch = 0;
						
//init the static members
	//current_patch = total_patches-1;
	//current_patch = 0;
	current_patch = 0;
	current_strip = 0;
	current_sheet = 0;
 		
 	_done = 0;
 	_waiting = 0;
 	
 	next_patch = new int32[total_patches];
 	
 int32 i,start_odd_even,odd_even,up_down;	
 	

 	current_patch = 0;
 	start_odd_even =  0;	
 	for (i=0; i<total_patches; i++)
 		{
 		odd_even = (i/NUM_ROWS_CMYK)%2;
 		if ((start_odd_even && odd_even) || (!start_odd_even && !odd_even)) up_down = 1;
 		else  up_down = -1;
 		next_patch[i] = i + up_down;
 		if (i%NUM_ROWS_CMYK == 0) 
 			if (start_odd_even == 0)
 				{
 				 if (odd_even == 1) next_patch[i] = i + NUM_ROWS_CMYK;
 				 }
 			else if (odd_even == 1) next_patch[i] = i + NUM_ROWS_CMYK;
 		if ((i+1)%NUM_ROWS_CMYK == 0) 
 			if (start_odd_even == 0)
 				{
 				 if (odd_even == 0) next_patch[i] = i + NUM_ROWS_CMYK;
 				 }
 			else if (odd_even == 0) next_patch[i] = i + NUM_ROWS_CMYK;		
 		if (next_patch[i] < 0) next_patch[i] = total_patches;

 		}
 		
/*		
	current_patch = total_patches-1;
	start_odd_even =  ((total_patches-1)/NUM_ROWS_CMYK)%2;
	for (i=0; i<total_patches; i++)
 		{
 		odd_even = (i/NUM_ROWS_CMYK)%2;
 		if ((start_odd_even && odd_even) || (!start_odd_even && !odd_even)) up_down = -1;
 		else  up_down = 1;
 		next_patch[i] = i + up_down;
 		if (i%NUM_ROWS_CMYK == 0) 
 			if (start_odd_even == 0)
 				{
 				 if (odd_even == 0) next_patch[i] = i - NUM_ROWS_CMYK;
 				 }
 			else if (odd_even == 1) next_patch[i] = i - NUM_ROWS_CMYK;
 		if ((i+1)%NUM_ROWS_CMYK == 0) 
 			if (start_odd_even == 0)
 				{
 				 if (odd_even == 1) next_patch[i] = i - NUM_ROWS_CMYK;
 				 }
 			else if (odd_even == 0) next_patch[i] = i - NUM_ROWS_CMYK;		
 		if (next_patch[i] < 0) next_patch[i] = total_patches;

 		} 
*/
	
	init();	
	SetSheetStripText();
	getpatchRGB();
	
	// Added by James, 3D the box
	threeD_box(ThreeDBox);
	
	// initialize comminications with the techkon
	tcom = NULL;
	tcom = new TCR(doc->whichport,NULL,NULL);
	if (tcom != NULL) tcom->InitializeTechkon();
	

	w = patchD->patches.width;
	h = patchD->patches.height;
	
	if (tcom != NULL) tcom->setUpPatches(patchD->patches.columns,patchD->patches.rows,w,h,patchD->patches.starting,patchD->patches.direction);

//	GetPort(&oldP);
//	SetPort(dp);
	
	// initialize the big gworld 
	GetDItem (dp, (short)(Strip_Rect), &iType, (Handle*)&iHandle, &iRect);
	tRect = iRect;
	OffsetRect(&tRect,-iRect.left,-iRect.top);
	error = NewGWorld( &BigGW, 32, &tRect, 0, 0, 0 );
	if (error != 0) 
		{
		delete this;
		return;
		} 
	GetGWorld(&oldGW,&oldGD);
	SetGWorld(BigGW,nil);	
	
	
//	GetBackColor(&oldbackcolor);
	GetForeColor(&oldforecolor);
	c.red = 65535;
	c.green = 65535;
	c.blue = 65535;
	RGBBackColor(&c);
	c.red = 0;
	c.green = 0;
	c.blue = 0;
	RGBForeColor(&c);		
	EraseRect( &tRect );
	
	SetGWorld(oldGW,oldGD);	
//	RGBBackColor(&oldbackcolor);
	RGBForeColor(&oldforecolor);	

//	SetPort(oldP);
		
	GetDItem (dp, (short)(Patch_Rect), &iType, (Handle*)&iHandle, &pRect);
	num_display_patch = (iRect.bottom-iRect.top)/(pRect.bottom-pRect.top);
	top_patch = 0;
	
	current_top = current_patch - 2*num_display_patch/3;
	current_bottom = current_top + num_display_patch - 1;
	if (current_top < 0) 
		{
		current_top = 0;
		current_bottom = current_top + num_display_patch - 1;
		}
	if (current_bottom >= total_patches-1)
		{
		current_bottom = total_patches - 1;
		current_top = current_bottom - num_display_patch + 1;
		}
	
	current_disp = 2*num_display_patch/3;
	
	Disable(dp,Redo);
	if (findNextPatch() == -1) 
		{
	//	Disable(dp,ReadNext);
		NotAlreadFinished = FALSE;
		}
	else NotAlreadFinished = TRUE;
	//Disable(dp,Save_as);	
	checkFinished();
	
	GetDItem (dp, (short)(Slider), &iType, (Handle*)&iHandle, &pRect);
	SetCtlMin((ControlHandle)iHandle,0);
	SetCtlMax((ControlHandle)iHandle,total_patches-1);
	
	GetDItem(dp, VoiceSet, &iType, (Handle*)&iHandle, &pRect);
	SetCtlValue((ControlHandle)iHandle,1);
	//voice_set = 1;
	
	_last_tick_time2 = 0;
	
	_first = 1;
	
	mon = new McoColorSync;
	mon->setType(Mco_ICC_System);

	lab = new McoColorSync;
	lab->GetProfile(LAB_PROFILE_NAME);
		
	lab_rgb_xform = new McoXformIcc;
	list[0] = lab;
	list[1] = mon;
	lab_rgb_xform->buildCW(list,2);	
		
	delete mon;
	delete lab;
	
	DrawWindow();
}	

TCRInDialog::~TCRInDialog(void)
{
OSErr			err;

	DisposeGWorld( BigGW );
	if (tcom != NULL) delete tcom;
	if (_rgbpatchH != NULL) McoDeleteHandle(_rgbpatchH);
	if (_labpatchrefH != NULL) McoDeleteHandle(_labpatchrefH);
	
	if (chan != nil) err = SndDisposeChannel (chan,TRUE);
	if (next_patch) delete next_patch;
	if (lab_rgb_xform != NULL) delete lab_rgb_xform;
	if (patch_data) delete patch_data;
}




McoStatus TCRInDialog::StorePatches(void)
{
int i,c = 0,d=0;
double *p,*pc;

	// copy patch data  into _patchH
	p = (double *)McoLockHandle(patchD->dataH);
	
	for (i=0; i<patchD->format.total; i++)
		{
		if  (c < num_used_patches)
			{
			p[c*3] = patch_data[i*3];
			p[c*3+1] = patch_data[i*3+1];
			p[c*3+2] = patch_data[i*3+2];
			c++;
			}
		}

	if (Scramble) unscramble_array(p,data_patches,3);	
	McoUnlockHandle(patchD->dataH);
	p = (double *)McoLockHandle(patchD->linearDataH);
		
	for (i=0; i<(patchD->format.numLinear-1)*patchD->format.numc; i++)
		{
		if  (c < num_used_patches)
			{
			p[d*3] = patch_data[i*3];
			p[d*3+1] = patch_data[i*3+1];
			p[d*3+2] = patch_data[i*3+2];
			c++;
			d++;
			}
		}	

	McoUnlockHandle(patchD->linearDataH);	
		
	doc->didGammutSurface = FALSE;
	doc->_smoothedPatches = FALSE;	

	return MCO_SUCCESS;
}


McoStatus TCRInDialog::DrawSinglePatch(int32 patch_num)
{
	char	st[255];
	double	new_rgb[3];
	RGBColor	c,oldbackcolor,oldforecolor;
	short	iType;
	Handle	iHandle;
	Rect 	iRect;
	Rect 	pRect, nRect,tRect,tRect2;
	double *rgb_data;
	WindowPtr	oldP;

	rgb_data = (double *)McoLockHandle(_rgbpatchH);

	GetDItem (dp, (short)(Strip_Rect), &iType, (Handle*)&iHandle, &iRect);
	GetDItem (dp, (short)(Patch_Rect), &iType, (Handle*)&iHandle, &pRect);
	GetDItem (dp, (short)(New_Patch_Rect), &iType, (Handle*)&iHandle, &nRect);
	
//	GetPort(&oldP);
//	SetPort(dp);	
	
	GetBackColor(&oldbackcolor);
	GetForeColor(&oldforecolor);

	c.red = ((int)rgb_data[3*patch_num])<<8;
	c.green = ((int)rgb_data[3*patch_num+1])<<8;
	c.blue = ((int)rgb_data[3*patch_num+2])<<8;

	RGBForeColor(&c);
	
	tRect2 = iRect;
	OffsetRect(&tRect2,-iRect.left,-iRect.top);
	tRect2.bottom = tRect2.bottom/num_display_patch;
	
	OffsetRect(&pRect,-iRect.left,-iRect.top);
	OffsetRect(&nRect,-iRect.left,-iRect.top);
	
	FillRect(&pRect,&qd.black);
	
	// draw the text

	if (patch_data[patch_num*3] > -1)
		{	
		//labtontscrgb(&patch_data[patch_num*3], new_rgb);
		ConvertToRGB(&patch_data[patch_num*3], new_rgb,1);
		c.red = ((int)new_rgb[0])<<8;
		c.green = ((int)new_rgb[1])<<8;
		c.blue = ((int)new_rgb[2])<<8;

		RGBForeColor(&c);
		
		FillRect(&nRect,&qd.black);
		
		c.red = 0;
		c.green = 0;
		c.blue = 0;
	
		TextSize(9);
		RGBForeColor(&c);
		MoveTo(nRect.right + 2,nRect.top+10);
		sprintf(st,"%5.1f",patch_data[patch_num*3]);
		
		DrawString(ctopstr(st));
		//DrawString("\p  ");
		MoveTo(nRect.right + 42,nRect.top+10);
		sprintf(st,"%5.1f",patch_data[patch_num*3+1]);
		DrawString(ctopstr(st));
		//DrawString("\p  ");
		MoveTo(nRect.right + 86,nRect.top+10);
		sprintf(st,"%5.1f",patch_data[patch_num*3+2]);
		DrawString(ctopstr(st));

		} 
	if (current_patch == patch_num)
		{
		c.red = 0;
		c.green = 0;
		c.blue = 0;

		RGBForeColor(&c);
		PenNormal ();
		PenSize (3, 3);
		FrameRect (&tRect2);
		PenNormal ();
		}
RGBBackColor(&oldbackcolor);
RGBForeColor(&oldforecolor);
McoUnlockHandle(_rgbpatchH);
//SetPort(oldP);
return MCO_SUCCESS;
}

McoStatus TCRInDialog::DisplayPatches(int32 top_patch,int32 bottom_patch)
{
	int i;
	GDHandle	oldGD;
	GWorldPtr	oldGW;
	GWorldPtr	SmallGW;
	short	iType;
	Handle	iHandle;
	Rect 	iRect;
	Rect 	pRect, nRect,tRect,tRect2,tRect3;
	QDErr		error;
	PixMapHandle	smallPixMap,bigPixMap;
	WindowPtr	oldGraf;
	RGBColor	c,oldbackcolor,oldforecolor;
	
	GetPort(&oldGraf);
	SetPort(dp);
		
	GetBackColor(&oldbackcolor);
	GetForeColor(&oldforecolor);
	c.red = 65535;
	c.green = 65535;
	c.blue = 65535;
	RGBBackColor(&c);
	c.red = 0;
	c.green = 0;
	c.blue = 0;
	RGBForeColor(&c);
	
	GetDItem (dp, (short)(Strip_Rect), &iType, (Handle*)&iHandle, &iRect);

	tRect = iRect;
	OffsetRect(&tRect,-tRect.left,-tRect.top);
	tRect3 = tRect;
	tRect.bottom = tRect.bottom/num_display_patch;
	
	error = NewGWorld( &SmallGW, 32, &tRect, 0, 0, 0 );
	if (error == 0)
		{
		GetGWorld(&oldGW,&oldGD);
		SetGWorld(SmallGW,nil);

		//EraseRect( &tRect );		// clear the GWorld 
		
		smallPixMap = GetGWorldPixMap ( SmallGW );
		bigPixMap = GetGWorldPixMap ( BigGW );
		if( (LockPixels ( bigPixMap )) && (LockPixels ( smallPixMap )) )
			{
			for (i=top_patch; i<=bottom_patch; i++)
				{
				EraseRect( &tRect );
				DrawSinglePatch(i);
				tRect2 = tRect;
				OffsetRect(&tRect2,0,(i-top_patch)*(tRect.bottom-tRect2.top));
				CopyBits( (BitMap*)*smallPixMap, (BitMap*)*bigPixMap, &tRect, &tRect2, srcCopy, 0 );
				}
			SetGWorld(oldGW,oldGD);	
			CopyBits( (BitMap*)*bigPixMap, (BitMap*)&dp->portBits, &tRect3, &iRect, srcCopy + ditherCopy, 0 );
			}
		DisposeGWorld( SmallGW );
		}
RGBBackColor(&oldbackcolor);
RGBForeColor(&oldforecolor);
SetPort(oldGraf);
return MCO_SUCCESS;
}




McoStatus TCRInDialog::ShowPatch(int32	patch_num)
{
int32	top,bottom;

	if ((patch_num < current_top) || (patch_num > current_bottom))
		{
		top = patch_num - 2*num_display_patch/3;
		bottom = top + num_display_patch - 1;
		if (top < 0) 
			{
			top = 0;
			bottom = top + num_display_patch - 1;
			}
		if (bottom >= total_patches-1)
			{
			bottom = total_patches - 1;
			top = bottom - num_display_patch + 1;
			}
			
		current_top = top;
		current_bottom = bottom;
		}
	
/*	if (total_patches - patch_num < num_display_patch) 
		{
		top = total_patches - num_display_patch + 1;
		bottom = total_patches;
		}
	else 
		{
		top = patch_num;
		bottom = patch_num+num_display_patch - 1;
		} */
	DisplayPatches(current_top,current_bottom);
	top_patch = top;
/*	}
else if (patch_num-top_patch < -1)
	{
	ScrollDisplay(patch_num,-1);
	top_patch = patch_num;
	}
else 
	{
	ScrollDisplay(patch_num,-1);
	top_patch++;
	} */
return MCO_SUCCESS;
}

McoStatus TCRInDialog::ShowPatchScroll(int32	patch_num)
{
int32	top,bottom;

/*if ((patch_num-top_patch < -1) || ((patch_num >= top_patch) && (patch_num <= top_patch+num_display_patch)) ||
	(patch_num > top_patch+num_display_patch+1))
	{ */
	top = patch_num - current_disp;
	bottom = top + num_display_patch - 1;
	if (top < 0) 
		{
		top = 0;
		bottom = top + num_display_patch - 1;
		}
	if (bottom >= total_patches-1)
		{
		bottom = total_patches - 1;
		top = bottom - num_display_patch + 1;
		}
		
	current_top = top;
	current_bottom = bottom;
	
/*	if (total_patches - patch_num < num_display_patch) 
		{
		top = total_patches - num_display_patch + 1;
		bottom = total_patches;
		}
	else 
		{
		top = patch_num;
		bottom = patch_num+num_display_patch - 1;
		} */
	DisplayPatches(top,bottom);
	top_patch = top;
/*	}
else if (patch_num-top_patch < -1)
	{
	ScrollDisplay(patch_num,-1);
	top_patch = patch_num;
	}
else 
	{
	ScrollDisplay(patch_num,-1);
	top_patch++;
	} */
return MCO_SUCCESS;
}

// find the number of the selected 
// -1 indicates that no patch has been found
int32	TCRInDialog::whichPatch(Point thePoint)
{

	short	iType;
	Handle	iHandle;
	Rect 	iRect;
	Rect 	pRect;
	Point	tPoint;
	int32	PatchHeight;
	
	GetDItem (dp, (short)(Strip_Rect), &iType, (Handle*)&iHandle, &iRect);
	GetDItem (dp, (short)(Patch_Rect), &iType, (Handle*)&iHandle, &pRect);
	
	// be sure that it is within the correct box
	if (PtInRect(thePoint,&iRect)) 
		{
		tPoint = thePoint;
		tPoint.v -= iRect.top;
		
		PatchHeight = pRect.bottom-pRect.top;
		if (PatchHeight == 0) return -1;
		return current_top+(tPoint.v/PatchHeight);	
		}
	return -1;
}

McoStatus TCRInDialog::playSound(short sn)
{
	Handle			Sound;
	
	OSErr			err;
	
	if (sn == -1) return MCO_SUCCESS;

	Sound = GetResource ('snd ', sn);
	if (ResError() != noErr || Sound == nil) return MCO_RSRC_ERROR;
	


	HLock(Sound);
	err = SndPlay (chan, (SndListResource**)Sound, TRUE);
	if (err != noErr) return MCO_RSRC_ERROR;

	
	HUnlock(Sound);
	return MCO_SUCCESS;
}

// load in the swop icc, build the color world, and translate the colors
McoStatus TCRInDialog::loadSwop(double *rgb_data,double *lab_data)
{
int i,j,k,l,m=0;
McoColorSync *mon = NULL,*printer = NULL,*lab= NULL,*list[2];
McoXformIcc  *xform = NULL;
McoStatus state = MCO_SUCCESS;
unsigned char	*cmyk_d = NULL;
unsigned char	*rgb_d = NULL;

mon = new McoColorSync;
mon->setType(Mco_ICC_System);

lab = new McoColorSync;
lab->GetProfile(LAB_PROFILE_NAME);

printer = new McoColorSync;
printer->GetProfile(SWOP_PROFILE_NAME);


cmyk_d = new unsigned char[total_patches*4];
rgb_d = new unsigned char[total_patches*3];

xform = new McoXformIcc;
list[0] = printer;
list[1] = mon;
state = xform->buildCW(list,2);
if (state != MCO_SUCCESS) goto bail;

if (patchD->ordering == Order_MCYK)
	{
	for (l=0; l<patchD->format.numslow; l++)
		{
		for (i=0; i<patchD->format.cubedim[l]; i++) 
			{
			for (j=0; j<patchD->format.cubedim[l]; j++)
				{
				for (k=0; k<patchD->format.cubedim[l]; k++)
					{
					cmyk_d[m++] = (unsigned char)(2.55*patchD->getcmpValues(l,j));
					cmyk_d[m++] = (unsigned char)(2.55*patchD->getcmpValues(l,k));
					cmyk_d[m++] = (unsigned char)(2.55*patchD->getcmpValues(l,i));
					cmyk_d[m++] = (unsigned char)(2.55*patchD->format.slowValues[l]);
					}
				}
			}
		}	
	}

for (i=0; i<patchD->format.numc; i++)
	{
	for (j=0; j<patchD->format.numLinear; j++)
		{
		for (k=0; k<patchD->format.numc; k++) cmyk_d[m+k] = 0;
		cmyk_d[m+i] = (unsigned char)(2.55*patchD->format.linearValues[j]);
		m+=patchD->format.numc;
		}
	}

xform->evalColors(cmyk_d,rgb_d,total_patches);

for (i=0; i<total_patches*3; i++) rgb_data[i] = rgb_d[i];

delete xform;
xform = new McoXformIcc;
list[0] = printer;
list[1] = lab;
state = xform->buildCW(list,2);

xform->evalColors(cmyk_d,rgb_d,total_patches);

for (i=0; i<total_patches; i++)
	{
	lab_data[i*3] = (double)rgb_d[i*3]/2.55;
	lab_data[i*3+1] = (double)rgb_d[i*3+1]-128; 
	lab_data[i*3+2] = (double)rgb_d[i*3+2]-128; 
	}

bail:	
if (xform) delete xform;
if (mon) delete mon;
if (lab) delete lab;
if (printer) delete printer;
if (cmyk_d) delete cmyk_d;
if (rgb_d) delete rgb_d;

return state;
}


McoStatus TCRInDialog::makeRGB(double *rgb_data, double *lab_data)
{
McoColorSync *mon,*lab,*list[2];
McoXformIcc  *xform;
long 		i, j, k, m=0;
unsigned char *rgb_d;
McoStatus state = MCO_SUCCESS;

rgb_d = new unsigned char[total_patches*3];	
	
for (i=0; i<patchD->format.cubedim[0]; i++) 
	{
	for (j=0; j<patchD->format.cubedim[0]; j++)
		{
		for (k=0; k<patchD->format.cubedim[0]; k++)
			{
			rgb_d[m++] = patchD->getcmpValues(0,k);
			rgb_d[m++] = patchD->getcmpValues(0,j);
			rgb_d[m++] = patchD->getcmpValues(0,i);
			}
		}
	}	

for (i=0; i<patchD->format.numc; i++)
	{
	for (j=0; j<patchD->format.numLinear; j++)
		{
		for (k=0; k<patchD->format.numc; k++) rgb_d[m+k] = 0;
		rgb_d[m+i] = patchD->format.linearValues[j];
		m+=3;
		}
	}

for (i=0; i<total_patches*3; i++) rgb_data[i] = (double)rgb_d[i];

mon = new McoColorSync;
mon->setType(Mco_ICC_System);

lab = new McoColorSync;
lab->GetProfile(LAB_PROFILE_NAME);
	
xform = new McoXformIcc;
list[0] = mon;
list[1] = lab;
state = xform->buildCW(list,2);	
	
xform->evalColors(rgb_d,rgb_d,total_patches);

for (i=0; i<total_patches; i++)
	{
	lab_data[i*3] = (double)rgb_d[i*3]/2.55;
	lab_data[i*3+1] = (double)rgb_d[i*3+1]-128; 
	lab_data[i*3+2] = (double)rgb_d[i*3+2]-128; 
	}
	
bail:	
if (xform) delete xform;
if (mon) delete mon;
if (lab) delete lab;
if (rgb_d) delete rgb_d;

return MCO_SUCCESS;		
}


#define bigger(a, b) ((a >= b) ? a :b)
#define smaller(a, b) ((a < b) ? a :b)

void TCRInDialog::ConvertToRGB(double *lab,double *rgb,int n)
{
unsigned char *temp;
int i;

temp = new unsigned char[n*3];

for (i=0; i<n; i++) 
	{
	temp[i*3] = 2.55*lab[i*3];
	temp[i*3+1] = lab[i*3+1]+128;
	temp[i*3+2] = lab[i*3+2]+128;
	}
	
if (lab_rgb_xform != NULL) lab_rgb_xform->evalColors(temp,temp,n);
	
for (i=0; i<n*3; i++) rgb[i] = temp[i];
delete temp;
	
}


// get the rgb values for all of the patches (JWV)
void TCRInDialog::getpatchRGB(void)
{
McoStatus state;
Str255	ts;
Str255	fn;
McoFile		*JobF;
int32	hs;
double *rgbpatches;
double *labpatchesref;

_rgbpatchH = NULL;
JobF = new McoFile;

_rgbpatchH = McoNewHandle(sizeof(double)*total_patches*3);
_labpatchrefH = McoNewHandle(sizeof(double)*total_patches*3);

//modified by Peter 9/20
switch(patchtype){
	case (CMYKPatches): //US letter
	default:
	labpatchesref = (double*)McoLockHandle(_labpatchrefH);
	rgbpatches = (double *)McoLockHandle(_rgbpatchH);
	loadSwop(rgbpatches,labpatchesref);

	break;
		
	case (RGBPatches): //RGB US Letter
	rgbpatches = (double *)McoLockHandle(_rgbpatchH);
	labpatchesref = (double*)McoLockHandle(_labpatchrefH);
	makeRGB(rgbpatches,labpatchesref);

	break;	

	}
McoUnlockHandle(_rgbpatchH);
McoUnlockHandle(_labpatchrefH);
	
}



void TCRInDialog::checkFinished(void)
{
int i,c = 0,good_patches = 0;

for (i=0; i<MAX_NUM_PATCHES; i++)
	{
	if ((i % patch_per_strip != 0) && (c < num_used_patches) && (c<data_patches))
		{
		if ( patch_data[i*3] > -1) good_patches++;
		c++;
		}
	}
if (good_patches == c)
	{
	Enable(dp,OK);
	}
else Disable(dp,OK);
}


void TCRInDialog::init(void)
{
int32 i,c = 0, d=0;
double *p,*p2;
int		flag;

	// copy patch data  into _patchH
	p = (double *)McoLockHandle(patchD->dataH);
	p2 = new double[data_patches*3];

	for (i=0; i<data_patches*3; i++)
		{
		p2[i] = p[i];
		}
		
	if (Scramble) scramble_array(p2,data_patches,3);	
	
	for (i=0; i<patchD->format.total; i++)
		{
		if ((c < num_used_patches) && (c<data_patches))
			{
			patch_data[i*3] = p2[c*3];
			patch_data[i*3+1] = p2[c*3+1];
			patch_data[i*3+2] = p2[c*3+2];
			c++;
			}
		else
			{
			patch_data[i*3] = 0;
			patch_data[i*3+1] = 0;
			patch_data[i*3+2] = 0;
			} 
		}
		
	delete p2;
	McoUnlockHandle(patchD->dataH);
	if (!patchD->linearDataH) 
		{
		p = (double *)McoLockHandle(patchD->linearDataH);
	
		for (i=0; i<(patchD->format.numLinear-1)*patchD->format.numc; i++)
			{
			if ((c < num_used_patches) && (c<data_patches))
				{
				patch_data[i*3] = p[d*3];
				patch_data[i*3+1] = p[d*3+1];
				patch_data[i*3+2] = p[d*3+2];
				d++;
				c++;
				}
			else
				{
				patch_data[i*3] = 0;
				patch_data[i*3+1] = 0;
				patch_data[i*3+2] = 0;
				} 
			}
		}
	
}

McoStatus TCRInDialog::checkError(int32 start_patch)
{
int32 i;
int32 end_patch;
double max_ref,min_ref;
double max_read,min_read;
double	*labref;
double  read,ref;
double	diff;
short   voice_nums[] = VoiceNums;

end_patch = start_patch+patch_per_strip;
if (end_patch > total_patches) end_patch = total_patches;

labref = (double*)McoLockHandle(_labpatchrefH);

max_ref = -1;
min_ref = 500;
max_read = -1;
min_read = 500;
for (i=start_patch; i<end_patch; i++)
	{
	if (patch_data[i*3] > max_read) max_read = patch_data[i*3];
	if (patch_data[i*3] < min_read) min_read = patch_data[i*3];
	if (labref[i*3] > max_ref) max_ref = labref[i*3];
	if (labref[i*3] < min_ref) min_ref = labref[i*3];
	}
	
diff = 0;	
for (i=start_patch; i<end_patch; i++)
	{
	read = (patch_data[i*3] - min_read)/(max_read-min_read);
	ref = (labref[i*3] - min_ref)/(max_ref-min_ref);
	diff += (read - ref)*(read-ref);
	}
diff = sqrt(diff);

if (diff > 0.90) playSound(voice_nums[(voice_set-1)*2]);
else playSound(voice_nums[(voice_set-1)*2+1]);

McoUnlockHandle(_labpatchrefH);
}


McoStatus TCRInDialog::readInPatches(void)
{
int i,count;
short		item;	
short		itemtype;
Handle		cn1,sliderControl;
Rect		r;
McoStatus state;
int32		start_patch;

//current_patch = current_patch/patch_per_strip;
//current_patch *= patch_per_strip;
start_patch = current_patch;


count = 0;
do {
	state = tcom->getNextPatch(current_patch,&patch_data[current_patch*3],0);
	if (state == MCO_SUCCESS) 
		{
		 playSound(EndColumnNum);
		}
	count ++;
	} while ((state != MCO_SUCCESS) && (count < 5));
if (state != MCO_SUCCESS) 
	{
	//tcom->TurnOnStripRead();
	return state;
	}
//playSound(ClickNum);
if (doc->patchtype == No_Patches) doc->patchtype = patchtype;
GetDItem ( dp, Slider, &itemtype, (Handle*)&sliderControl, &r );
SetCtlValue ( (ControlHandle)sliderControl,current_patch);
//ShowPatchScroll(current_patch);
current_patch = next_patch[current_patch];
//current_patch++;
	
// check for error
checkError(start_patch);
if (current_patch >= total_patches) 
	{
	current_patch = total_patches -1;
	_waiting = FALSE;
	}
ShowPatchScroll(current_patch);
current_sheet = current_patch/(patch_per_strip*strip_per_sheet);
current_strip = (current_patch - current_sheet*(patch_per_strip*strip_per_sheet))/patch_per_strip;
SetSheetStripText();
//tcom->TurnOnStripRead();
return MCO_SUCCESS;
}



McoStatus TCRInDialog::SetSheetStripText(void)
{
	Rect r;
	short itemType;
	Handle cn1;
	Str255 theString;
	int32 current_row;
	
	
GetDItem ( dp,Cur_sheet, &itemType, (Handle*)&cn1, &r );
NumToString(current_strip+1,theString);
SetIText(cn1,theString);
GetDItem ( dp,Cur_strip, &itemType, (Handle*)&cn1, &r );
current_row = current_patch % patch_per_strip;
if (current_row+1 > 26) 
	{
	theString[0] = 2;
	theString[1] = 'A';
	theString[2] = 'A'+current_row-26;
	}
else
	{
	theString[0] = 1;
	theString[1] = 'A'+current_row;
	}
SetIText(cn1,theString);
return MCO_SUCCESS;
}

int32 TCRInDialog::findNextPatch(void)
{
int32 i;
for (i=0; i<total_patches; i++)
	{
	if (patch_data[i*3] < 0) return i;
	}
return -1;
}

pascal Boolean myFilter(DialogPtr dlg, EventRecord *event, short *itemHit);

Boolean TCRInDialog::TimerEventPresent(void)
{
if( TickCount() - _last_tick_time2 > 1 ) 
	{
	return TRUE;
	}
return FALSE;
}

				


McoStatus TCRInDialog::DrawWindow(void)	
{			
	Rect updateRect;
	WindowPtr	oldP;
	
	GetPort(&oldP);

	// update the window data	
	updateRect = (**(dp->visRgn)).rgnBBox;
	SetPort( dp ) ;
	ShowPatch(current_patch);
	SetPort(oldP);
	return MCO_SUCCESS;
}	

McoStatus TCRInDialog::UpdateWindow(void)	
{			
	Rect updateRect;
	WindowPtr	oldP;
	
	GetPort(&oldP);
	
	// update the window data	
	updateRect = (**(dp->visRgn)).rgnBBox;
	SetPort( dp ) ;
	BeginUpdate( dp );
	ShowPatch(current_patch);
	DrawDialog( dp );
	EndUpdate( dp );
	
	SetPort(oldP);
	return MCO_SUCCESS;
}			

Boolean TCRInDialog::isMyObject(Point where,short *item) 
{
WindowPtr oldP;
short  titem;
ControlHandle	sliderControl;

GetPort(&oldP);
SetPort(dp);
GlobalToLocal(&where);
titem = FindDItem(dp,where);
titem ++;
if (titem == Slider)
	{
	if (FindControl(where,dp,(ControlHandle*)&sliderControl) != inThumb)
		{
		*item = titem;
		SetPort(oldP);
		return TRUE;
		}
	}
SetPort(oldP);
return FALSE;
}


McoStatus TCRInDialog::DoStart(void)
{
Str255	st;
int32	wi,hi;
double	w,h;
short		iType;
Handle		iHandle;
Handle		sHandle;
Rect 		iRect, r,pRect,tRect;
double		patchPoints[6];
int32		tablePoints[6];
McoStatus 	state = MCO_SUCCESS;


w = patchD->patches.width;
h = patchD->patches.height;
		
if (tcom != NULL) tcom->setUpPatches(patchD->patches.columns,patchD->patches.rows,w,h,patchD->patches.starting,patchD->patches.direction);

if (_first) 
	{
	McoMessAlert(MCO_CALIB,0L);
	_first = 0;
	}

// check to see if auto alignment is to be used
if (McoMessAlert(MCO_FIND_PATCHS,0L) == MCO_SUCCESS)
	{
	tcom->setCurrentPatch(0);
	state = PositionTable(tcom,&tablePoints[0],1);
	if (state != MCO_SUCCESS) return state;
	tcom->moveToPatch(patchD->patches.rows-1);
	state = PositionTable(tcom,&tablePoints[2],2);
	if (state != MCO_SUCCESS) return state;
	tcom->moveToPatch(patchD->patches.rows*(patchD->patches.columns-1));
	state = PositionTable(tcom,&tablePoints[4],3);
	if (state != MCO_SUCCESS) return state;
	tcom->getPatchPoint(0,&patchPoints[0]);
	tcom->getPatchPoint(patchD->patches.rows-1,&patchPoints[2]);
	tcom->getPatchPoint(patchD->patches.rows*(patchD->patches.columns-1),&patchPoints[4]);
	tcom->setPoints(tablePoints,patchPoints);
	tcom->moveToPatch(current_patch);
	_waiting=1;	
	return MCO_SUCCESS;
	}
else if (McoMessAlert(MCO_ALIGN_PATCHES,0L) == MCO_SUCCESS)
	{
	tcom->setCurrentPatch(current_patch);
	_waiting=1;	
	return MCO_SUCCESS;
	}
return MCO_FAILURE;
}





Boolean TCRInDialog::KeyFilter(EventRecord *theEvent,short *itemHit )
{

//	if (( theEvent->what != keyDown) && (theEvent->what != autoKey))	// just looking for keystrokes
//		return(FALSE);

	switch ( (theEvent->message) & charCodeMask ) {
		case 0x0d:	// Return pressed or ...
		case 0x03:	// ... Enter pressed
			*itemHit = OK;
			return( TRUE );	// Note: pascal-style TRUE
		case 0x1b:
			*itemHit = Cancel;	// Esc pressed
			return( TRUE );
		case 0x1E:
			*itemHit = Position_Up;
			return( TRUE );
		case 0x1F:
			*itemHit = Position_Down;
			return( TRUE );
		case 0x1C:
			*itemHit = Position_Left;
			return( TRUE );
		case 0x1D:
			*itemHit = Position_Right;
			return( TRUE );
		} 
		
if (isPressed(0x7E)) *itemHit = Position_Up;
if (isPressed(0x7D)) *itemHit = Position_Down;
if (isPressed(0x7B)) *itemHit = Position_Left;
if (isPressed(0x7C)) *itemHit = Position_Right;

		
return( FALSE );	// all others
} 

McoStatus TCRInDialog::DoEvents(short item, Point clickPoint, Window_Events &code, MS_WindowTypes &wintype, int32 &winnum, void **data, Boolean &changed)
{
UserItemUPP myfilter;
Str255		theString;
short		itemtype;
Handle		cn1,sliderControl;
Rect		r;
short		part;
Point		mpoint;
int32		next_patch;
McoStatus	status;
WindowPtr	oldp;
int32		temp;
double 		m=1;

	GetPort(&oldp);
	SetPort(dp);

	Changed = FALSE;
	code = WE_Do_Nothing;
	wintype = No_Dialog;
	winnum = -1;
	status = MCO_SUCCESS;

	if (isPressed(0x38)) m = 10;

	if (item != -1) switch(item){
		case (TIMER_ITEM ):   // a timer event has occured
			_last_tick_time2 = TickCount();
			if (_waiting)
				{
				doc->needsSave = TRUE;
			//	GetDItem ( dp,Message, &itemtype, (Handle*)&cn1, &r );
			//	GetIndString(theString,Message_List_ID,4);
			//	SetIText(cn1,theString);
				readInPatches();
				next_patch = findNextPatch();
				if (next_patch == -1)
					{
				//	GetDItem ( dp,Message, &itemtype, (Handle*)&cn1, &r );
				//	GetIndString(theString,Message_List_ID,5);
				//	SetIText(cn1,theString);
					_done == TRUE;
					if (current_patch == total_patches) _waiting = FALSE;
					Disable(dp,Redo);
					//Disable(dp,ReadNext);
					if (NotAlreadFinished) Disable(dp,Cancel);
					Enable(dp,Save_as);	
					Enable(dp,OK);			
					}
				else
					{

				//	GetDItem ( dp,Message, &itemtype, (Handle*)&cn1, &r );
				//	GetIndString(theString,Message_List_ID,2);
				//	SetIText(cn1,theString);
					}
				if (!_waiting)
					{
					GetDItem ( dp,Start, &itemtype, (Handle*)&cn1, &r );
					GetIndString(theString,Button_Labels,1);
					SetCTitle((ControlHandle)cn1,theString);
					}
				checkFinished();
				}
			break;
		case (Slider):   // the slider has been adjusted
			GetMouse(&mpoint);
			do {
				current_patch = GetSlider(mpoint,Slider);
				ShowPatchScroll(current_patch);
				SetSheetStripText();
				current_sheet = current_patch/(patch_per_strip*strip_per_sheet);
				current_strip = (current_patch - current_sheet*(patch_per_strip*strip_per_sheet))/patch_per_strip;	
				GetMouse(&mpoint);
				} while ( StillDown ( ) );
			checkError((current_patch/patch_per_strip)*patch_per_strip);
			//_waiting = 0;
			Enable(dp,Redo);
		//	if (findNextPatch() != -1) Enable(dp,ReadNext);	   
			//ShowPatch(current_patch); // display the window
			//current_strip = current_patch/patch_per_strip;
			//current_sheet = current_patch/(patch_per_strip*strip_per_sheet);
		//	GetDItem ( dp,Message, &itemtype, (Handle*)&cn1, &r );
		//	GetIndString(theString,Message_List_ID,1);
		//	SetIText(cn1,theString);
			SetSheetStripText();
			break;
		case (Start): // start or stop reading
			if (_waiting) 
				{
				_waiting = 0;
				GetDItem ( dp,Start, &itemtype, (Handle*)&cn1, &r );
				GetIndString(theString,Button_Labels,1);
				SetCTitle((ControlHandle)cn1,theString);
				current_patch--;
				ShowPatchScroll(current_patch);
				SetSheetStripText();
				current_sheet = current_patch/(patch_per_strip*strip_per_sheet);
				current_strip = (current_patch - current_sheet*(patch_per_strip*strip_per_sheet))/patch_per_strip;
				}
			else 
				{
				if (DoStart() == MCO_SUCCESS)
					{
					GetDItem ( dp,Start, &itemtype, (Handle*)&cn1, &r );
					GetIndString(theString,Button_Labels,2);
					SetCTitle((ControlHandle)cn1,theString);
					}
				}
			break;
		case Position_Up:
			if (!_waiting)
				{
				tcom->moveDistance(0,m*0.5);
				}
			break;
		case Position_Down:
			if (!_waiting)
				{	
				tcom->moveDistance(0,-0.5*m);
				}
			break;
		case Position_Left:
			if (!_waiting)
				{
				tcom->moveDistance(-0.5*m,0);
				}
			break;
		case Position_Right:
			if (!_waiting)
				{
				tcom->moveDistance(0.5*m,0);
				}
			break;			
		case (Save_as):
			StorePatches();
			doc->patchtype = patchtype;
			doc->handle_save_datafile(patchD);
			ShowPatch(current_patch);
			break;
		case (VoiceSet):
			GetDItem(dp, VoiceSet, &itemtype, (Handle*)&cn1, &r );
			voice_set = GetCtlValue((ControlHandle)cn1);
			break;
		case (Strip_Rect):
			GlobalToLocal(&clickPoint);
			temp = whichPatch(clickPoint);
			if (temp != -1)
				{
				current_patch = temp;
				current_disp = current_patch-current_top;
				GetDItem ( dp, Slider, &itemtype, (Handle*)&sliderControl, &r );
				SetCtlValue ( (ControlHandle)sliderControl,current_patch);
				ShowPatch(current_patch);
				SetSheetStripText();
				}
			break;
		case (OK):
			StorePatches();
			doc->patchtype = patchtype;
			//doc->needsSave = TRUE;
			code = WE_Close_Window;
			wintype = WinType;
			winnum = WinNum;
			break;
		case (Cancel):
			code = WE_Close_Window;
			wintype = WinType;
			winnum = WinNum;
			break;
    }	
	SetPort(oldp);
	return status;	    	
}


