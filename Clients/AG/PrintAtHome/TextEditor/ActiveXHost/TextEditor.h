#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CTexteditor2 wrapper class

class CTexteditor2 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CTexteditor2)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x4A443D96, 0x6C35, 0x48D2, { 0x9C, 0x3B, 0xE1, 0x85, 0xCF, 0x3D, 0x8B, 0x5A } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:
enum STR_TYPES
{
    STR_BEZIER = 0,
    STR_CIRCLE = 1,
    STR_SEMICIRCLE = 2,
    STR_ELLIPSE = 3,
    STR_HORIZONTALLINE = 4,
    STR_VERTICALLINE = 5,
    STR_INVERTEDSEMICIRCLE = 6,
    STR_INVERTEDBEZIER = 7,
    STR_SPIRAL = 8
}STR_TYPES_T;
enum IMAGE_TYPES
{
    BMP = 0,
    JPEG = 1,
    GIF = 2,
    TIFF = 3,
    PNG = 4
}IMAGE_TYPES_T;
enum LINEAR_MODES
{
    SWEEP_RIGHT = 0,
    SWEEP_DOWN = 1,
    SWEEP_RIGHT_DIAGONAL = 2,
    SWEEP_LEFT_DIAGONAL = 3
}LINEAR_MODES_T;


// Operations
public:

// ITextEditor

// Functions
//

	void IncrementLineHeight()
	{
		InvokeHelper(0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DecrementLineHeight()
	{
		InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void IncrementCharWidth()
	{
		InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DecrementCharWidth()
	{
		InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetFontSize(unsigned short FontSize)
	{
		static BYTE parms[] = VTS_UI2 ;
		InvokeHelper(0x5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, FontSize);
	}
	void SetCurveType(unsigned short CurveType)
	{
		static BYTE parms[] = VTS_UI2 ;
		InvokeHelper(0x6, DISPATCH_METHOD, VT_EMPTY, NULL, parms, CurveType);
	}
	void SetImageSize(float Width, float Height)
	{
		static BYTE parms[] = VTS_R4 VTS_R4 ;
		InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Width, Height);
	}
	void SetString(LPCTSTR LineString, unsigned short Index)
	{
		static BYTE parms[] = VTS_BSTR VTS_UI2 ;
		InvokeHelper(0x8, DISPATCH_METHOD, VT_EMPTY, NULL, parms, LineString, Index);
	}
	void SaveImage(LPCTSTR FileName, unsigned short ImageType)
	{
		static BYTE parms[] = VTS_BSTR VTS_UI2 ;
		InvokeHelper(0x9, DISPATCH_METHOD, VT_EMPTY, NULL, parms, FileName, ImageType);
	}
	void RefreshPreviewWindow()
	{
		InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetColor1(long Color1)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Color1);
	}
	void SetColor2(long Color2)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Color2);
	}
	void SetPreviewBkColor(long Clr)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Clr);
	}
	void DeleteString(unsigned short Index)
	{
		static BYTE parms[] = VTS_UI2 ;
		InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Index);
	}
	void SetImageBkColor(long Clr)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Clr);
	}
	void SetColorGradientMode(unsigned short SweepMode)
	{
		static BYTE parms[] = VTS_UI2 ;
		InvokeHelper(0x10, DISPATCH_METHOD, VT_EMPTY, NULL, parms, SweepMode);
	}
	void SetFont(LPCTSTR FontName)
	{
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, parms, FontName);
	}
	void SetWhiteBkgdTransparent(BOOL bkgdTransparent)
	{
		static BYTE parms[] = VTS_BOOL ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, parms, bkgdTransparent);
	}

// Properties
//



};
