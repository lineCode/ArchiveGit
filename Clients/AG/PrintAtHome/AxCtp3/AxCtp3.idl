// AxCtp3.idl : IDL source for AxCtp3.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (AxCtp3.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include <olectl.h>

[
	object,
	uuid(4C333333-5856-4413-9C89-394611BCBE8A),
	dual,
	helpstring("ICtp Interface"),
	pointer_default(unique)
]
interface ICtp : IDispatch
{
	[propput, id(1)]  HRESULT Src([in]BSTR strProperty);
	[propget, id(1)]  HRESULT Src([out,retval]BSTR* pstrProperty);
	[propput, id(2)]  HRESULT Context([in]BSTR strProperty);
	[propget, id(2)]  HRESULT Context([out,retval]BSTR* pstrProperty);
	[         id(7)]  HRESULT GetVerse([in]BSTR strFilePath, [out,retval]BSTR* pstrProperty);
	[         id(8)]  HRESULT GetAttributes([in]BSTR strFilePath, [out,retval]BSTR* pstrAttributes);
	[         id(9)]  HRESULT ProcessImage([in]BSTR strFilePath, [in]int nMaxKB, [in]int nQuality, [out,retval]BSTR* pstrFilePathNew);
	[         id(10)] HRESULT DoCommand([in]BSTR strCommand, [out,retval]long* plResult);
	[         id(11)] HRESULT GetCommand([in]BSTR strCommand, [out,retval]long* plResult);
	[         id(12)] HRESULT FileDownload([in]BSTR strProperty);
	[		  id(13)] HRESULT FYSTransfer([in]BSTR OrderId, [in]BSTR CorrelationId, [in]BSTR FYSInfo, [out,retval]BSTR* pstrError);
	[		  id(14)] HRESULT GetUsageData([out, retval]BSTR* pstrUsageData);
	[		  id(15)] HRESULT FYSClose();
	[id(16), helpstring("method LoadSrc")] HRESULT LoadSrc([in] VARIANT varSrc);
};

[
	uuid(43333333-317E-4797-BE46-2AB8B5980651),
	version(1.0),
	helpstring("AxCtp3 1.0 Type Library")
]
library AXCTP3Lib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		uuid(D0207328-3435-4d34-B213-6F7ECF81DD02),
		helpstring("ICtpEvents Interface")
	]
	dispinterface _ICtpEvents
	{
		properties:
		methods:
		[id(1)] HRESULT FileSaved([in] long lValue);
		[id(2)] HRESULT PluginReady([in] long lValue);
	};

	[
		uuid(BB333333-6DA1-4e80-B62A-3DF950FCC697),
		helpstring("Ctp Class")
	]
	coclass Ctp
	{
		[default] interface ICtp;
		[default, source] dispinterface _ICtpEvents;
	};

};
