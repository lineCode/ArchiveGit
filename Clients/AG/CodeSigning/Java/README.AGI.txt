This was not easy

That is, creating a Java KeyStore using our existing code-signing cert.

Here's how it was done (maybe there's an easier way, I don't know)

The current code-signing cert is in the two files: MyCredentials.spc MyPrivateKey.pvk

Steps:
1) install pvkimport.exe
2) run: pvkimprt MyCredentials.spc MyPrivateKey.pvk
3) run: mmc
4) In MMC, add "certificate" snap-in; the certificate we just installed is probably under "Personal"
5) Give it a friendly name of "AGICodeSigning" (not sure if this is necessary)
6) Export it (with key) to a .pfx file
7) In Firefox, import the .pfx file, and make a "backup" as a .p12
8) make a .pem certificate and key from the .p12 file:
   run: openssl pkcs12 -in AGICodeSigning.p12 -clcerts -nokeys -out cert.pem
   run: openssl pkcs12 -in AGICodeSigning.p12 -nocerts -out key.pem
The files cert.pem and key.pem were created from the .p12 file
9) Strip the attributes from the .pem files (not sure if this is necessary) so now the files begin/end with something like "-----BEGIN CERTIFICATE-----"
10) Reformat the .pem files to .der
   run: openssl pkcs8 -topk8 -nocrypt -in key.pem -inform PEM -out key.der -outform DER
   run: openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER
11) Create a java keystore from the .der files
   run: java ImportKey key.der cert.der AGICodeSigning **password***


In all cases, when a password was used/needed, I just used the password from the original certificate...probably not the best way...



Here are the resources used to figure this out:


from:
http://www.petefreitag.com/item/117.cfm

******************************************


You will need two files:

    * pvk file (generated by IE, and stored in c:\mykey.pvk by default)
    * spc file (the cert)

Now to generate a PKCS12 pfx file you need Microsoft's pvkimprt tool (If I could have found this tool sooner, I could have saved myself a lot of time playing with openssl, and the ported pvk tool!). So install and run the tool:

pvkimprt c:\mycert.spc c:\mykey.pvk

Import it into your personal keystore, so we can export it as a pfx file:

    * Start-Run: mmc.exe
    * Add Snapin: Certificates
    * Properties: Add a friendly name to the cert (this will be the alias)
    * Export a pfx file

Now that you have your pfx file, your going to need to guess what import and export it again (the docs state that the pfx file will only work on jdk 1.4, I had no luck, so I generated a p12 file as shown below).

    * Open up Netscape/Mozilla/Firefox Certificate Manager (Tools-Options-Advanced-Certificates in Firefox)
    * Import your pfx file
    * Export a p12 file

And after that process you will have a certificate you can use to sign jar files, and possibly start your own import/export business.

Here's the KB article from Thawte, that had I been able to find on my own would have saved me lots of time: http://kb.thawte.com/thawte/thawte/esupport.asp?id=vs26925

And here's the ant task I use to sign jar files:

<target name="signjar" depends="jar">
 <input
    message="Please enter keystore password:"
    addproperty="keypass" />
	
 <signjar jar="${lib}/yourJar.jar" storetype="pkcs12"
   keystore="${keystore}/yourkey.p12" alias="Your Alias" 
   storepass="${keypass}"/>
</target>




****************************************************
****************************************************
****************************************************


from:
http://www.agentbob.info/agentbob/79.html


****************************************************


Import private key and certificate into Java Key Store (JKS)

Apache Tomcat and many other Java applications expect to retrieve SSL/TLS certificates from a Java Key Store (JKS). Jave Virtual Machines usually come with keytool to help you create a new key store.

Keytool helps you to:

    * create a new JKS with a new private key
    * generate a Certificate Signung Request (CSR) for the private key in this JKS
    * import a certificate that you received for this CSR into your JKS

Keytool does not let you import an existing private key for which you already have a certificate. So you need to do this yourself, here's how:

Let's assume you have a private key (key.pem) and a certificate (cert.pem), both in PEM format as the file names suggest.

PEM format is 'kind-of-human-readable' and looks like e.g.

-----BEGIN CERTIFICATE-----
Ulv6GtdFbjzLeqlkelqwewlq822OrEPdH+zxKUkKGX/eN
.
. (snip)
.
9801asds3BCfu52dm7JHzPAOqWKaEwIgymlk=
----END CERTIFICATE-----

Convert both, the key and the certificate into DER format using openssl:

openssl pkcs8 -topk8 -nocrypt -in key.pem -inform PEM -out key.der -outform DER
openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER

Now comes the tricky bit, you need something to import these files into the JKS. ImportKey will do this for you, get the ImportKey.java source or the compiled (Java 1.5 !) ImportKey.class and run it like

user@host:~$ java ImportKey key.der cert.der
Using keystore-file : /home/user/keystore.ImportKey
One certificate, no chain.
Key and certificate stored.
Alias:importkey  Password:importkey

Now we have a proper JKS containing our private key and certificate in a file called keystore.ImportKey, using 'importkey' as alias and also as password. For any further changes, like changing the password we can use keytool.
