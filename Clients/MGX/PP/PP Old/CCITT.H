
/***************************************************************************
**
**      Filename: ccitt_e.h
**
**      Description: This file contains CCITT codetables for black and 
**              white runs for the compression routine.
**
**
**      Creation Date: 3/2/1987
**
**      Modification History:
**       
**
**     This source code is provided courtesy of Hewlett-Packard     **
**     Company, Greeley Division.  			            **
**                                                                  **
**     Licensed by Hewlett-Packard and Microsoft to developers for  **
**     use with Microsoft Windows.  Please consult your license     **
**     agreement concerning your rights to modify and distribute.   **
**								    **
**     Copyright Hewlett-Packard Company, 1987.			    **					    
*********************************************************************/

/* structure for CCITT Group3 tables */
											
struct pairs    {                                                                       int nbits;                      /* number of codeword bits */
        int bits;                       /* bits in codeword */
};

/* codetable for white runs */

struct pairs whttable[] =
  {
  8,  0x3500,         /* 0, "00110101",*/
  6,  0x1c00,         /* 1, "000111",*/
  4,  0x7000,         /* 2, "0111",*/
  4,  0x8000,         /* 3, "1000",*/
  4,  0xb000,         /* 4, "1011",*/
  4,  0xc000,         /* 5, "1100",*/
  4,  0xe000,         /* 6, "1110",*/
  4,  0xf000,         /* 7, "1111",*/
  5,  0x9800,         /* 8, "10011",*/
  5,  0xa000,         /* 9, "10100",*/
  5,  0x3800,         /* 10,  "00111",*/
  5,  0x4000,         /* 11,  "01000",*/
  6,  0x2000,         /* 12,  "001000",*/
  6,  0x0c00,         /* 13,  "000011",*/
  6,  0xd000,         /* 14,  "110100",*/
  6,  0xd400,         /* 15,  "110101",*/
  6,  0xa800,         /* 16,  "101010",*/
  6,  0xac00,         /* 17,  "101011",*/
  7,  0x4e00,         /* 18,  "0100111",*/
  7,  0x1800,         /* 19,  "0001100",*/
  7,  0x1000,         /* 20,  "0001000",*/
  7,  0x2e00,         /* 21,  "0010111",*/
  7,  0x0600,         /* 22,  "0000011",*/
  7,  0x0800,         /* 23,  "0000100",*/
  7,  0x5000,         /* 24,  "0101000",*/
  7,  0x5600,         /* 25,  "0101011",*/
  7,  0x2600,         /* 26,  "0010011",*/
  7,  0x4800,         /* 27,  "0100100",*/
  7,  0x3000,         /* 28,  "0011000",*/
  8,  0x0200,         /* 29,  "00000010",*/
  8,  0x0300,         /* 30,  "00000011",*/
  8,  0x1a00,         /* 31,  "00011010",*/
  8,  0x1b00,         /* 32,  "00011011",*/
  8,  0x1200,         /* 33,  "00010010",*/
  8,  0x1300,         /* 34,  "00010011",*/
  8,  0x1400,         /* 35,  "00010100",*/
  8,  0x1500,         /* 36,  "00010101",*/
  8,  0x1600,         /* 37,  "00010110",*/
  8,  0x1700,         /* 38,  "00010111",*/
  8,  0x2800,         /* 39,  "00101000",*/
  8,  0x2900,         /* 40,  "00101001",*/
  8,  0x2a00,         /* 41,  "00101010",*/
  8,  0x2b00,         /* 42,  "00101011",*/
  8,  0x2c00,         /* 43,  "00101100",*/
  8,  0x2d00,         /* 44,  "00101101",*/
  8,  0x0400,         /* 45,  "00000100",*/
  8,  0x0500,         /* 46,  "00000101",*/
  8,  0x0a00,         /* 47,  "00001010",*/
  8,  0x0b00,         /* 48,  "00001011",*/
  8,  0x5200,         /* 49,  "01010010",*/
  8,  0x5300,         /* 50,  "01010011",*/
  8,  0x5400,         /* 51,  "01010100",*/
  8,  0x5500,         /* 52,  "01010101",*/
  8,  0x2400,         /* 53,  "00100100",*/
  8,  0x2500,         /* 54,  "00100101",*/
  8,  0x5800,         /* 55,  "01011000",*/
  8,  0x5900,         /* 56,  "01011001",*/
  8,  0x5a00,         /* 57,  "01011010",*/
  8,  0x5b00,         /* 58,  "01011011",*/
  8,  0x4a00,         /* 59,  "01001010",*/
  8,  0x4b00,         /* 60,  "01001011",*/
  8,  0x3200,         /* 61,  "00110010",*/
  8,  0x3300,         /* 62,  "00110011",*/
  8,  0x3400,         /* 63,  "00110100",*/
  5,  0xd800,         /* 64,  "11011",*/
  5,  0x9000,         /* 128, "10010",*/
  6,  0x5c00,         /* 192, "010111",*/
  7,  0x6e00,         /* 256, "0110111",*/
  8,  0x3600,         /* 320, "00110110",*/
  8,  0x3700,         /* 384, "00110111",*/
  8,  0x6400,         /* 448, "01100100",*/
  8,  0x6500,         /* 512, "01100101",*/
  8,  0x6800,         /* 576, "01101000",*/
  8,  0x6700,         /* 640, "01100111",*/
  9,  0x6600,         /* 704, "011001100",*/
  9,  0x6680,         /* 768, "011001101",*/
  9,  0x6900,         /* 832, "011010010",*/
  9,  0x6980,         /* 896, "011010011",*/
  9,  0x6a00,         /* 960, "011010100",*/
  9,  0x6a80,         /* 1024,  "011010101",*/
  9,  0x6b00,         /* 1088,  "011010110",*/
  9,  0x6b80,         /* 1152,  "011010111",*/
  9,  0x6c00,         /* 1216,  "011011000",*/
  9,  0x6c80,         /* 1280,  "011011001",*/
  9,  0x6d00,         /* 1344,  "011011010",*/
  9,  0x6d80,         /* 1408,  "011011011",*/
  9,  0x4c00,         /* 1472,  "010011000",*/
  9,  0x4c80,         /* 1536,  "010011001",*/
  9,  0x4d00,         /* 1600,  "010011010",*/
  6,  0x6000,         /* 1664,  "011000",*/
  9,  0x4d80,         /* 1728,  "010011011",*/
  11, 0x0100,         /* 1792,  "00000001000",*/
  11, 0x0180,         /* 1856,  "00000001100",*/
  11, 0x01a0,         /* 1920,  "00000001101",*/
  12, 0x0120,         /* 1984,  "000000010010",*/
  12, 0x0130,         /* 2048,  "000000010011",*/
  12, 0x0140,         /* 2112,  "000000010100",*/
  12, 0x0150,         /* 2176,  "000000010101",*/
  12, 0x0160,         /* 2240,  "000000010110",*/
  12, 0x0170,         /* 2304,  "000000010111",*/
  12, 0x01c0,         /* 2368,  "000000011100",*/
  12, 0x01d0,         /* 2432,  "000000011101",*/
  12, 0x01e0,         /* 2496,  "000000011110",*/
  12, 0x01f0,         /* 2560,  "000000011111",*/
  12, 0x0010          /*  EOL,  "000000000001",*/
  };

/* codetable for black runs */

struct pairs blktable[] =
  {
  10, 0x0dc0,         /* 0, "0000110111",*/
  3,  0x4000,         /* 1, "010",*/
  2,  0xc000,         /* 2, "11",*/
  2,  0x8000,         /* 3, "10",*/
  3,  0x6000,         /* 4, "011",*/
  4,  0x3000,         /* 5, "0011",*/
  4,  0x2000,         /* 6, "0010",*/
  5,  0x1800,         /* 7, "00011",*/
  6,  0x1400,         /* 8, "000101",*/
  6,  0x1000,         /* 9, "000100",*/
  7,  0x0800,         /* 10,  "0000100",*/
  7,  0x0a00,         /* 11,  "0000101",*/
  7,  0x0e00,         /* 12,  "0000111",*/
  8,  0x0400,         /* 13,  "00000100",*/
  8,  0x0700,         /* 14,  "00000111",*/
  9,  0x0c00,         /* 15,  "000011000",*/
  10, 0x05c0,         /* 16,  "0000010111",*/
  10, 0x0600,         /* 17,  "0000011000",*/
  10, 0x0200,         /* 18,  "0000001000",*/
  11, 0x0ce0,         /* 19,  "00001100111",*/
  11, 0x0d00,         /* 20,  "00001101000",*/
  11, 0x0d80,         /* 21,  "00001101100",*/
  11, 0x06e0,         /* 22,  "00000110111",*/
  11, 0x0500,         /* 23,  "00000101000",*/
  11, 0x02e0,         /* 24,  "00000010111",*/
  11, 0x0300,         /* 25,  "00000011000",*/
  12, 0x0ca0,         /* 26,  "000011001010",*/
  12, 0x0cb0,         /* 27,  "000011001011",*/
  12, 0x0cc0,         /* 28,  "000011001100",*/
  12, 0x0cd0,         /* 29,  "000011001101",*/
  12, 0x0680,         /* 30,  "000001101000",*/
  12, 0x0690,         /* 31,  "000001101001",*/
  12, 0x06a0,         /* 32,  "000001101010",*/
  12, 0x06b0,         /* 33,  "000001101011",*/
  12, 0x0d20,         /* 34,  "000011010010",*/
  12, 0x0d30,         /* 35,  "000011010011",*/
  12, 0x0d40,         /* 36,  "000011010100",*/
  12, 0x0d50,         /* 37,  "000011010101",*/
  12, 0x0d60,         /* 38,  "000011010110",*/
  12, 0x0d70,         /* 39,  "000011010111",*/
  12, 0x06c0,         /* 40,  "000001101100",*/
  12, 0x06d0,         /* 41,  "000001101101",*/
  12, 0x0da0,         /* 42,  "000011011010",*/
  12, 0x0db0,         /* 43,  "000011011011",*/
  12, 0x0540,         /* 44,  "000001010100",*/
  12, 0x0550,         /* 45,  "000001010101",*/
  12, 0x0560,         /* 46,  "000001010110",*/
  12, 0x0570,         /* 47,  "000001010111",*/
  12, 0x0640,         /* 48,  "000001100100",*/
  12, 0x0650,         /* 49,  "000001100101",*/
  12, 0x0520,         /* 50,  "000001010010",*/
  12, 0x0530,         /* 51,  "000001010011",*/
  12, 0x0240,         /* 52,  "000000100100",*/
  12, 0x0370,         /* 53,  "000000110111",*/
  12, 0x0380,         /* 54,  "000000111000",*/
  12, 0x0270,         /* 55,  "000000100111",*/
  12, 0x0280,         /* 56,  "000000101000",*/
  12, 0x0580,         /* 57,  "000001011000",*/
  12, 0x0590,         /* 58,  "000001011001",*/
  12, 0x02b0,         /* 59,  "000000101011",*/
  12, 0x02c0,         /* 60,  "000000101100",*/
  12, 0x05a0,         /* 61,  "000001011010",*/
  12, 0x0660,         /* 62,  "000001100110",*/
  12, 0x0670,         /* 63,  "000001100111",*/
  10, 0x03c0,         /* 64,  "0000001111",*/
  12, 0x0c80,         /* 128, "000011001000",*/
  12, 0x0c90,         /* 192, "000011001001",*/
  12, 0x05b0,         /* 256, "000001011011",*/
  12, 0x0330,         /* 320, "000000110011",*/
  12, 0x0340,         /* 384, "000000110100",*/
  12, 0x0350,         /* 448, "000000110101",*/
  13, 0x0360,         /* 512, "0000001101100",*/
  13, 0x0368,         /* 576, "0000001101101",*/
  13, 0x0250,         /* 640, "0000001001010",*/
  13, 0x0258,         /* 704, "0000001001011",*/
  13, 0x0260,         /* 768, "0000001001100",*/
  13, 0x0268,         /* 832, "0000001001101",*/
  13, 0x0390,         /* 896, "0000001110010",*/
  13, 0x0398,         /* 960, "0000001110011",*/
  13, 0x03a0,         /* 1024,  "0000001110100",*/
  13, 0x03a8,         /* 1088,  "0000001110101",*/
  13, 0x03b0,         /* 1152,  "0000001110110",*/
  13, 0x03b8,         /* 1216,  "0000001110111",*/
  13, 0x0290,         /* 1280,  "0000001010010",*/
  13, 0x0298,         /* 1344,  "0000001010011",*/
  13, 0x02a0,         /* 1408,  "0000001010100",*/
  13, 0x02a8,         /* 1472,  "0000001010101",*/
  13, 0x02d0,         /* 1536,  "0000001011010",*/
  13, 0x02d8,         /* 1600,  "0000001011011",*/
  13, 0x0320,         /* 1664,  "0000001100100",*/
  13, 0x0328,         /* 1728,  "0000001100101",*/
  11, 0x0100,         /* 1792,  "00000001000",*/
  11, 0x0180,         /* 1856,  "00000001100",*/
  11, 0x01a0,         /* 1920,  "00000001101",*/
  12, 0x0120,         /* 1984,  "000000010010",*/
  12, 0x0130,         /* 2048,  "000000010011",*/
  12, 0x0140,         /* 2112,  "000000010100",*/
  12, 0x0150,         /* 2176,  "000000010101",*/
  12, 0x0160,         /* 2240,  "000000010110",*/
  12, 0x0170,         /* 2304,  "000000010111",*/
  12, 0x01c0,         /* 2368,  "000000011100",*/
  12, 0x01d0,         /* 2432,  "000000011101",*/
  12, 0x01e0,         /* 2496,  "000000011110",*/
  12, 0x01f0,         /* 2560,  "000000011111",*/
  12, 0x0010          /* EOL,   "000000000001",*/
 

/***************************************************************************
**
**      Filename: ccitt_t.h
**
**      Description: This file contains CCITT codetables for black and 
**              white runs for the decompression routine.
**
**      Creation Date: 3/2/1987
**
**      Modification History:
**       
**     This source code is provided courtesy of Hewlett-Packard     **
**     Company, Greeley Division.  				    **
**                                                                  **
**     Licensed by Hewlett-Packard and Microsoft to developers for  **
**     use with Microsoft Windows.  Please consult your license     **
**     agreement concerning your rights to modify and distribute.   **
**								    **					
**     Copyright Hewlett-Packard Company, 1987.			    **					  
*********************************************************************/
  
/* codetable for white runs */

struct pairs decodewhttable[] =
  {											
 0, "00110101",
 1, "000111",
 2, "0111",
 3, "1000",
 4, "1011",
 5, "1100",
 6, "1110",
 7, "1111",
 8, "10011",
 9, "10100",
10, "00111",
11, "01000",
12, "001000",
13, "000011",
14, "110100",
15, "110101",
16, "101010",
17,  "101011",
18,  "0100111",
19,  "0001100",
20,  "0001000",
21,  "0010111",
22,  "0000011",
23,  "0000100",
24,  "0101000",
25,  "0101011",
26,  "0010011",
27,  "0100100",
28,  "0011000",
29,  "00000010",
30,  "00000011",
31,  "00011010",
32,  "00011011",
33,  "00010010",
34,  "00010011",
35,  "00010100",
36,  "00010101",
37,  "00010110",
38,  "00010111",
39,  "00101000",
40,  "00101001",
41,  "00101010",
42,  "00101011",
43,  "00101100",
44,  "00101101",
45,  "00000100",
46,  "00000101",
47,  "00001010",
48,  "00001011",
49,  "01010010",
50,  "01010011",
51,  "01010100",
52,  "01010101",
53,  "00100100",
54,  "00100101",
55,  "01011000",
56,  "01011001",
57,  "01011010",
58,  "01011011",
59,  "01001010",
60,  "01001011",
61,  "00110010",
62,  "00110011",
63,  "00110100",
64,  "11011",
128, "10010",
192, "010111",
256, "0110111",
320, "00110110",
384, "00110111",
448, "01100100",
512, "01100101",
576, "01101000",
640, "01100111",
704, "011001100",
768, "011001101",
832, "011010010",
896, "011010011",
960, "011010100",
1024,  "011010101",
1088,  "011010110",
1152,  "011010111",
1216,  "011011000",
1280,  "011011001",
1344,  "011011010",
1408,  "011011011",
1472,  "010011000",
1536,  "010011001",
1600,  "010011010",
1664,  "011000",
1728,  "010011011",
1792,  "00000001000",
1856,  "00000001100",
1920,  "00000001101",
1984,  "000000010010",
2048,  "000000010011",
2112,  "000000010100",
2176,  "000000010101",
2240,  "000000010110",
2304,  "000000010111",
2368,  "000000011100",
2432,  "000000011101",
2496,  "000000011110",
2560,  "000000011111",
EOL,   "000000000001",
 -1,   ""
  };

/* codetable for black runs */

struct pairs decodeblktable[] =
  {
0,   "0000110111",
1,   "010",
2,   "11",
3,   "10",
4,   "011",
5,   "0011",
6,   "0010",
7,   "00011",
8,   "000101",
9,   "000100",
10,  "0000100",
11,  "0000101",
12,  "0000111",
13,  "00000100",
14,  "00000111",
15,  "000011000",
16,  "0000010111",
17,  "0000011000",
18,  "0000001000",
19,  "00001100111",
20,  "00001101000",
21,  "00001101100",
22,  "00000110111",
23,  "00000101000",
24,  "00000010111",
25,  "00000011000",
26,  "000011001010",
27,  "000011001011",
28,  "000011001100",
29,  "000011001101",
30,  "000001101000",
31,  "000001101001",
32,  "000001101010",
33,  "000001101011",
34,  "000011010010",
35,  "000011010011",
36,  "000011010100",
37,  "000011010101",
38,  "000011010110",
39,  "000011010111",
40,  "000001101100",
41,  "000001101101",
42,  "000011011010",
43,  "000011011011",
44,  "000001010100",
45,  "000001010101",
46,  "000001010110",
47,  "000001010111",
48,  "000001100100",
49,  "000001100101",
50,  "000001010010",
51,  "000001010011",
52,  "000000100100",
53,  "000000110111",
54,  "000000111000",
55,  "000000100111",
56,  "000000101000",
57,  "000001011000",
58,  "000001011001",
59,  "000000101011",
60,  "000000101100",
61,  "000001011010",
62,  "000001100110",
63,  "000001100111",
64,  "0000001111",
128, "000011001000",
192, "000011001001",
256, "000001011011",
320, "000000110011",
384, "000000110100",
448, "000000110101",
512, "0000001101100",
576, "0000001101101",
640, "0000001001010",
704, "0000001001011",
768, "0000001001100",
832, "0000001001101",
896, "0000001110010",
960, "0000001110011",
1024,  "0000001110100",
1088,  "0000001110101",
1152,  "0000001110110",
1216,  "0000001110111",
1280,  "0000001010010",
1344,  "0000001010011",
1408,  "0000001010100",
1472,  "0000001010101",
1536,  "0000001011010",
1600,  "0000001011011",
1664,  "0000001100100",
1728,  "0000001100101",
1792,  "00000001000",
1856,  "00000001100",
1920,  "00000001101",
1984,  "000000010010",
2048,  "000000010011",
2112,  "000000010100",
2176,  "000000010101",
2240,  "000000010110",
2304,  "000000010111",
2368,  "000000011100",
2432,  "000000011101",
2496,  "000000011110",
2560,  "000000011111",
EOL,   "000000000001",
-1,    ""
  };

TABLE WhiteTreeTable = { WHITE , &decodewhttable[0] };

TABLE BlackTreeTable = { BLACK , &decodeblktable[0] };

/***************************************************************************
**
**      Filename: tree.h
**
**      Description: This file includes all the needed definitions for the 
**              tree handlingroutines and programs associated with the 
**              ccitt compression algorithm.
**
**      Creation Date: 3/2/1987
**
**      Modification History:
**       
**														
**     This source code is provided courtesy of Hewlett-Packard     **
**     Company, Greeley Division. 				    **                                                                  **
**     Licensed by Hewlett-Packard and Microsoft to developers for  **
**     use with Microsoft Windows.  Please consult your license     **
**     agreement concerning your rights to modify and distribute.   **
**								    **
**     Copyright Hewlett-Packard Company, 1987.			    **	
*********************************************************************/

#define TREE           struct tree
#define TABLE          struct table

/* First comes the tree structure  */

#define UNINIT         -2      /* Uninitialized token number. */
#define NOTLEAF        -1      /* Token for not-leaf nodes. */

struct node
{
        struct node *next[2];   /* Pointers to next nodes in tree. */
        int token;             /* Token number for this node. */
};

struct tree
{
        int id;                /* Id number for this tree. */
        struct node *root;
};

/* code table structure */

struct pairs
{
        int token;             /* Token number for this pair. */
        char *str;             /* For example, "0010010".      */
};

struct table
{
        int id;                /* Table id number. */
        struct pairs *pair;     /* Array of pairs. */
};

/* Table numbers.  WHITE and BLACK tables have standard numbers. */

#define BLACK                   0
#define WHITE                   1

/* This is a real token number. */
#define EOL            32767   /* End of iine token. */

/* bit masks for parsing bit stream */

static unsigned char mask[8] ={0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01};

/* Finaily, some handy declarations. */

TREE *ReadTree();


/***************************************************************************
**
**      Filename: datacomp.h
**
**      Description: This file contains error codes for the compression
**              and decompression routines.
**
**
**      Creation Date: 3/2/1987
**
**      Modification History:
**       
**     This source code is provided courtesy of Hewlett-Packard     **
**     Company, Greeley Division.                                   ** 						                                                                 **
**     Licensed by Hewlett-Packard and Microsoft to developers for  **
**     use with Microsoft Windows.  Please consult your license     **
**     agreement concerning your rights to modify and distribute.   **
**								    **
**     Copyright Hewlett-Packard Company, 1987.			    **	
*********************************************************************/

/* error return codes */

#define CANTBUILDCODETREE -200   /* dcmpbin */
#define LINESIZEMISCOMPARE -201
#define FILEIOERROR -202
#define PARSINGERROR -203

#define UNCOMPRESSABLEFILE -404  /* c0mpbin */
#define ACCESSDENIED -405
#define NODISCSPACE -406
